
/Users/Tim/github/Particle_FeinstaubGauge/target/Particle_FeinstaubGauge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023c8  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00016484  2**0
                  CONTENTS
  3 .data         00000078  2003e2f8  000d63e0  0000e2f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000480  2003e370  2003e370  0001e370  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d6458  000d6458  00016458  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d6480  000d6480  00016480  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000aaea5  00000000  00000000  00016484  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000f85d  00000000  00000000  000c1329  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001448b  00000000  00000000  000d0b86  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001dc0  00000000  00000000  000e5011  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000031a0  00000000  00000000  000e6dd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00030c2d  00000000  00000000  000e9f71  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00023e73  00000000  00000000  0011ab9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000d3d31  00000000  00000000  0013ea11  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000b634  00000000  00000000  00212744  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	dc 5e 0d 00                                         .^..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fe7b 	bl	d5d28 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fe80 	bl	d5d3e <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2f8 	.word	0x2003e2f8
   d4048:	000d63e0 	.word	0x000d63e0
   d404c:	2003e370 	.word	0x2003e370
   d4050:	2003e370 	.word	0x2003e370
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fc47 	bl	d58ec <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d63e0 	.word	0x000d63e0
   d4080:	000d63a8 	.word	0x000d63a8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b8c0 	b.w	d4208 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f963 	bl	d4354 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bbf9 	b.w	d5888 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bb9d 	b.w	d47d4 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bba3 	b.w	d47e4 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bba1 	b.w	d47e4 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_Z15PM10Handler_K16PKcS0_>:
  delay(50000);

}

void PM10Handler_K16(const char *event, const char *data)
{
   d40b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  PM10_K16 = String(data);
   d40b6:	4c12      	ldr	r4, [pc, #72]	; (d4100 <_Z15PM10Handler_K16PKcS0_+0x4c>)
   d40b8:	4668      	mov	r0, sp
   d40ba:	f001 f9b9 	bl	d5430 <_ZN6StringC1EPK19__FlashStringHelper>
   d40be:	4669      	mov	r1, sp
   d40c0:	4620      	mov	r0, r4
   d40c2:	f001 f9ff 	bl	d54c4 <_ZN6StringaSEOS_>
   d40c6:	4668      	mov	r0, sp
   d40c8:	f001 f96b 	bl	d53a2 <_ZN6StringD1Ev>

  Serial.print("PM10 (K16): ");
   d40cc:	f001 fb0a 	bl	d56e4 <_Z16_fetch_usbserialv>
   d40d0:	490c      	ldr	r1, [pc, #48]	; (d4104 <_Z15PM10Handler_K16PKcS0_+0x50>)
   d40d2:	f001 f8ad 	bl	d5230 <_ZN5Print5printEPKc>
  Serial.println(PM10_K16);
   d40d6:	f001 fb05 	bl	d56e4 <_Z16_fetch_usbserialv>
   d40da:	6821      	ldr	r1, [r4, #0]
  */

  //setdac(latest);

  // notify user about change
  digitalWrite(led_pin, HIGH);
   d40dc:	4c0a      	ldr	r4, [pc, #40]	; (d4108 <_Z15PM10Handler_K16PKcS0_+0x54>)
{

  PM10_K16 = String(data);

  Serial.print("PM10 (K16): ");
  Serial.println(PM10_K16);
   d40de:	f001 f8ba 	bl	d5256 <_ZN5Print7printlnEPKc>
  */

  //setdac(latest);

  // notify user about change
  digitalWrite(led_pin, HIGH);
   d40e2:	2101      	movs	r1, #1
   d40e4:	8820      	ldrh	r0, [r4, #0]
   d40e6:	f001 fc46 	bl	d5976 <digitalWrite>
  delay(500);
   d40ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d40ee:	f000 fbad 	bl	d484c <delay>
  digitalWrite(led_pin, LOW);
   d40f2:	2100      	movs	r1, #0
   d40f4:	8820      	ldrh	r0, [r4, #0]
   d40f6:	f001 fc3e 	bl	d5976 <digitalWrite>
}
   d40fa:	b004      	add	sp, #16
   d40fc:	bd10      	pop	{r4, pc}
   d40fe:	bf00      	nop
   d4100:	2003e3ac 	.word	0x2003e3ac
   d4104:	000d5ef0 	.word	0x000d5ef0
   d4108:	2003e300 	.word	0x2003e300

000d410c <_Z15PM10Handler_F43PKcS0_>:

void PM10Handler_F43(const char *event, const char *data)
{
   d410c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  PM10_F43 = String(data);
   d410e:	4c12      	ldr	r4, [pc, #72]	; (d4158 <_Z15PM10Handler_F43PKcS0_+0x4c>)
   d4110:	4668      	mov	r0, sp
   d4112:	f001 f98d 	bl	d5430 <_ZN6StringC1EPK19__FlashStringHelper>
   d4116:	4669      	mov	r1, sp
   d4118:	4620      	mov	r0, r4
   d411a:	f001 f9d3 	bl	d54c4 <_ZN6StringaSEOS_>
   d411e:	4668      	mov	r0, sp
   d4120:	f001 f93f 	bl	d53a2 <_ZN6StringD1Ev>

  Serial.print("PM10 (F43): ");
   d4124:	f001 fade 	bl	d56e4 <_Z16_fetch_usbserialv>
   d4128:	490c      	ldr	r1, [pc, #48]	; (d415c <_Z15PM10Handler_F43PKcS0_+0x50>)
   d412a:	f001 f881 	bl	d5230 <_ZN5Print5printEPKc>
  Serial.println(PM10_F43);
   d412e:	f001 fad9 	bl	d56e4 <_Z16_fetch_usbserialv>
   d4132:	6821      	ldr	r1, [r4, #0]
  */

  //setdac(latest);

  // notify user about change
  digitalWrite(led_pin, HIGH);
   d4134:	4c0a      	ldr	r4, [pc, #40]	; (d4160 <_Z15PM10Handler_F43PKcS0_+0x54>)
{

  PM10_F43 = String(data);

  Serial.print("PM10 (F43): ");
  Serial.println(PM10_F43);
   d4136:	f001 f88e 	bl	d5256 <_ZN5Print7printlnEPKc>
  */

  //setdac(latest);

  // notify user about change
  digitalWrite(led_pin, HIGH);
   d413a:	2101      	movs	r1, #1
   d413c:	8820      	ldrh	r0, [r4, #0]
   d413e:	f001 fc1a 	bl	d5976 <digitalWrite>
  delay(500);
   d4142:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4146:	f000 fb81 	bl	d484c <delay>
  digitalWrite(led_pin, LOW);
   d414a:	2100      	movs	r1, #0
   d414c:	8820      	ldrh	r0, [r4, #0]
   d414e:	f001 fc12 	bl	d5976 <digitalWrite>
}
   d4152:	b004      	add	sp, #16
   d4154:	bd10      	pop	{r4, pc}
   d4156:	bf00      	nop
   d4158:	2003e3bc 	.word	0x2003e3bc
   d415c:	000d5efd 	.word	0x000d5efd
   d4160:	2003e300 	.word	0x2003e300

000d4164 <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E32Spark_Subscription_Scope_TypeDef.isra.2.constprop.8>:
    // Deprecated methods
    particle::Future<bool> publish(const char* name) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;
    particle::Future<bool> publish(const char* name, const char* data) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;
    particle::Future<bool> publish(const char* name, const char* data, int ttl) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
   d4164:	b507      	push	{r0, r1, r2, lr}
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d4166:	2300      	movs	r3, #0
   d4168:	9301      	str	r3, [sp, #4]
   d416a:	9300      	str	r3, [sp, #0]
   d416c:	461a      	mov	r2, r3
   d416e:	f000 fad1 	bl	d4714 <spark_subscribe>
    }
   d4172:	b003      	add	sp, #12
   d4174:	f85d fb04 	ldr.w	pc, [sp], #4

000d4178 <_Z12AlarmHandlerPKcS0_>:

void AlarmHandler(const char *event, const char *data)
{
   d4178:	b530      	push	{r4, r5, lr}
   d417a:	b085      	sub	sp, #20

  String latest = String(data);
   d417c:	4668      	mov	r0, sp
   d417e:	f001 f957 	bl	d5430 <_ZN6StringC1EPK19__FlashStringHelper>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4182:	491b      	ldr	r1, [pc, #108]	; (d41f0 <_Z12AlarmHandlerPKcS0_+0x78>)
   d4184:	4668      	mov	r0, sp
   d4186:	f001 f9c9 	bl	d551c <_ZNK6String6equalsEPKc>

  if (latest == "true")
   d418a:	4604      	mov	r4, r0
   d418c:	b168      	cbz	r0, d41aa <_Z12AlarmHandlerPKcS0_+0x32>
  {

    feinstaubAlarm = true;
   d418e:	4d19      	ldr	r5, [pc, #100]	; (d41f4 <_Z12AlarmHandlerPKcS0_+0x7c>)
   d4190:	2401      	movs	r4, #1
   d4192:	702c      	strb	r4, [r5, #0]
    Serial.printf("Feinstaubalarm: %s\n", feinstaubAlarm ? "true" : "false");
   d4194:	f001 faa6 	bl	d56e4 <_Z16_fetch_usbserialv>
   d4198:	7829      	ldrb	r1, [r5, #0]
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d419a:	4a17      	ldr	r2, [pc, #92]	; (d41f8 <_Z12AlarmHandlerPKcS0_+0x80>)
   d419c:	4b14      	ldr	r3, [pc, #80]	; (d41f0 <_Z12AlarmHandlerPKcS0_+0x78>)
   d419e:	2900      	cmp	r1, #0
   d41a0:	bf08      	it	eq
   d41a2:	4613      	moveq	r3, r2
   d41a4:	4a15      	ldr	r2, [pc, #84]	; (d41fc <_Z12AlarmHandlerPKcS0_+0x84>)
   d41a6:	2100      	movs	r1, #0
   d41a8:	e010      	b.n	d41cc <_Z12AlarmHandlerPKcS0_+0x54>
   d41aa:	4913      	ldr	r1, [pc, #76]	; (d41f8 <_Z12AlarmHandlerPKcS0_+0x80>)
   d41ac:	4668      	mov	r0, sp
   d41ae:	f001 f9b5 	bl	d551c <_ZNK6String6equalsEPKc>
    digitalWrite(LED_FeinstaubAlarm, HIGH);
  }
  else if (latest == "false")
   d41b2:	b198      	cbz	r0, d41dc <_Z12AlarmHandlerPKcS0_+0x64>
  {

    feinstaubAlarm = false;
   d41b4:	4d0f      	ldr	r5, [pc, #60]	; (d41f4 <_Z12AlarmHandlerPKcS0_+0x7c>)
   d41b6:	702c      	strb	r4, [r5, #0]
    Serial.printf("Feinstaubalarm: %s\n", feinstaubAlarm ? "true" : "false");
   d41b8:	f001 fa94 	bl	d56e4 <_Z16_fetch_usbserialv>
   d41bc:	7829      	ldrb	r1, [r5, #0]
   d41be:	4a0e      	ldr	r2, [pc, #56]	; (d41f8 <_Z12AlarmHandlerPKcS0_+0x80>)
   d41c0:	4b0b      	ldr	r3, [pc, #44]	; (d41f0 <_Z12AlarmHandlerPKcS0_+0x78>)
   d41c2:	2900      	cmp	r1, #0
   d41c4:	bf08      	it	eq
   d41c6:	4613      	moveq	r3, r2
   d41c8:	4a0c      	ldr	r2, [pc, #48]	; (d41fc <_Z12AlarmHandlerPKcS0_+0x84>)
   d41ca:	4621      	mov	r1, r4
   d41cc:	f001 f87c 	bl	d52c8 <_ZN5Print11printf_implEbPKcz>
    digitalWrite(LED_FeinstaubAlarm, LOW);
   d41d0:	4b0b      	ldr	r3, [pc, #44]	; (d4200 <_Z12AlarmHandlerPKcS0_+0x88>)
   d41d2:	4621      	mov	r1, r4
   d41d4:	8818      	ldrh	r0, [r3, #0]
   d41d6:	f001 fbce 	bl	d5976 <digitalWrite>
   d41da:	e004      	b.n	d41e6 <_Z12AlarmHandlerPKcS0_+0x6e>
  }
  else
  {

    Serial.println("Feinstaubalarm: Error!");
   d41dc:	f001 fa82 	bl	d56e4 <_Z16_fetch_usbserialv>
   d41e0:	4908      	ldr	r1, [pc, #32]	; (d4204 <_Z12AlarmHandlerPKcS0_+0x8c>)
   d41e2:	f001 f838 	bl	d5256 <_ZN5Print7printlnEPKc>
}

void AlarmHandler(const char *event, const char *data)
{

  String latest = String(data);
   d41e6:	4668      	mov	r0, sp
   d41e8:	f001 f8db 	bl	d53a2 <_ZN6StringD1Ev>
  else
  {

    Serial.println("Feinstaubalarm: Error!");
  }
}
   d41ec:	b005      	add	sp, #20
   d41ee:	bd30      	pop	{r4, r5, pc}
   d41f0:	000d5f0a 	.word	0x000d5f0a
   d41f4:	2003e394 	.word	0x2003e394
   d41f8:	000d5f0f 	.word	0x000d5f0f
   d41fc:	000d5f15 	.word	0x000d5f15
   d4200:	2003e2fc 	.word	0x2003e2fc
   d4204:	000d5f29 	.word	0x000d5f29

000d4208 <setup>:

bool swing = false;
bool feinstaubAlarm = false;

// setup() runs once, when the device is first turned on.
void setup() {
   d4208:	b508      	push	{r3, lr}

  // Start SW-timers
  //timer.start();

  // Establish serial connection
  Serial.begin();
   d420a:	f001 fa6b 	bl	d56e4 <_Z16_fetch_usbserialv>
   d420e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4212:	f001 fa5b 	bl	d56cc <_ZN9USBSerial5beginEl>

  // Declaring I/Os
  pinMode(pwm_pin, OUTPUT);
   d4216:	4b11      	ldr	r3, [pc, #68]	; (d425c <setup+0x54>)
   d4218:	2101      	movs	r1, #1
   d421a:	8818      	ldrh	r0, [r3, #0]
   d421c:	f001 fb9a 	bl	d5954 <pinMode>
  pinMode(led_pin, OUTPUT);
   d4220:	4b0f      	ldr	r3, [pc, #60]	; (d4260 <setup+0x58>)
   d4222:	2101      	movs	r1, #1
   d4224:	8818      	ldrh	r0, [r3, #0]
   d4226:	f001 fb95 	bl	d5954 <pinMode>
  pinMode(LED_FeinstaubAlarm, OUTPUT);
   d422a:	4b0e      	ldr	r3, [pc, #56]	; (d4264 <setup+0x5c>)
   d422c:	2101      	movs	r1, #1
   d422e:	8818      	ldrh	r0, [r3, #0]
   d4230:	f001 fb90 	bl	d5954 <pinMode>
  pinMode(pm10Switch, INPUT_PULLDOWN);
   d4234:	4b0c      	ldr	r3, [pc, #48]	; (d4268 <setup+0x60>)
   d4236:	2103      	movs	r1, #3
   d4238:	8818      	ldrh	r0, [r3, #0]
   d423a:	f001 fb8b 	bl	d5954 <pinMode>

  //Particle.function("setgauge",setdac);

  // Subscribe to the integration response event
  Particle.subscribe("hook-response/PM10_K16", PM10Handler_K16, MY_DEVICES);
   d423e:	490b      	ldr	r1, [pc, #44]	; (d426c <setup+0x64>)
   d4240:	480b      	ldr	r0, [pc, #44]	; (d4270 <setup+0x68>)
   d4242:	f7ff ff8f 	bl	d4164 <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E32Spark_Subscription_Scope_TypeDef.isra.2.constprop.8>
  Particle.subscribe("hook-response/PM10_F43", PM10Handler_F43, MY_DEVICES);
   d4246:	490b      	ldr	r1, [pc, #44]	; (d4274 <setup+0x6c>)
   d4248:	480b      	ldr	r0, [pc, #44]	; (d4278 <setup+0x70>)
   d424a:	f7ff ff8b 	bl	d4164 <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E32Spark_Subscription_Scope_TypeDef.isra.2.constprop.8>
  Particle.subscribe("hook-response/Feinstaubalarm_Stuttgart", AlarmHandler, MY_DEVICES);
   d424e:	490b      	ldr	r1, [pc, #44]	; (d427c <setup+0x74>)
   d4250:	480b      	ldr	r0, [pc, #44]	; (d4280 <setup+0x78>)

}
   d4252:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  //Particle.function("setgauge",setdac);

  // Subscribe to the integration response event
  Particle.subscribe("hook-response/PM10_K16", PM10Handler_K16, MY_DEVICES);
  Particle.subscribe("hook-response/PM10_F43", PM10Handler_F43, MY_DEVICES);
  Particle.subscribe("hook-response/Feinstaubalarm_Stuttgart", AlarmHandler, MY_DEVICES);
   d4256:	f7ff bf85 	b.w	d4164 <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E32Spark_Subscription_Scope_TypeDef.isra.2.constprop.8>
   d425a:	bf00      	nop
   d425c:	2003e2f8 	.word	0x2003e2f8
   d4260:	2003e300 	.word	0x2003e300
   d4264:	2003e2fc 	.word	0x2003e2fc
   d4268:	2003e3cc 	.word	0x2003e3cc
   d426c:	000d40b5 	.word	0x000d40b5
   d4270:	000d5f40 	.word	0x000d5f40
   d4274:	000d410d 	.word	0x000d410d
   d4278:	000d5f57 	.word	0x000d5f57
   d427c:	000d4179 	.word	0x000d4179
   d4280:	000d5f6e 	.word	0x000d5f6e

000d4284 <_Z6setdac6String>:
  Particle.publish("PM10_F43", PM10_F43data, PRIVATE);
  Particle.publish("Feinstaubalarm_Stuttgart", FeinstaubAlarmStatus, PRIVATE);
}

int setdac(String command)
{
   d4284:	b507      	push	{r0, r1, r2, lr}

  // Handle the integration response
  int commandint = command.toInt();
   d4286:	f001 f95b 	bl	d5540 <_ZNK6String5toIntEv>
  if ((commandint >= 0) && (commandint <= 100))
   d428a:	2864      	cmp	r0, #100	; 0x64
   d428c:	d80d      	bhi.n	d42aa <_Z6setdac6String+0x26>
  {
    commandint = map(commandint, 0, 100, 0, 255); //in low, high to out low, high
   d428e:	23ff      	movs	r3, #255	; 0xff
   d4290:	9300      	str	r3, [sp, #0]
   d4292:	2300      	movs	r3, #0
   d4294:	4619      	mov	r1, r3
   d4296:	2264      	movs	r2, #100	; 0x64
   d4298:	f000 facc 	bl	d4834 <_Z3mapiiiii>
    analogWrite(pwm_pin, commandint, 500);
   d429c:	4b04      	ldr	r3, [pc, #16]	; (d42b0 <_Z6setdac6String+0x2c>)
   d429e:	4601      	mov	r1, r0
   d42a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   d42a4:	8818      	ldrh	r0, [r3, #0]
   d42a6:	f001 fb7f 	bl	d59a8 <_Z11analogWritetmm>
  }
   d42aa:	b003      	add	sp, #12
   d42ac:	f85d fb04 	ldr.w	pc, [sp], #4
   d42b0:	2003e2f8 	.word	0x2003e2f8

000d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d42b4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d42b6:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d42b8:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d42ba:	b17c      	cbz	r4, d42dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d42bc:	6863      	ldr	r3, [r4, #4]
   d42be:	3b01      	subs	r3, #1
   d42c0:	6063      	str	r3, [r4, #4]
   d42c2:	b95b      	cbnz	r3, d42dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d42c4:	6823      	ldr	r3, [r4, #0]
   d42c6:	4620      	mov	r0, r4
   d42c8:	689b      	ldr	r3, [r3, #8]
   d42ca:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d42cc:	68a3      	ldr	r3, [r4, #8]
   d42ce:	3b01      	subs	r3, #1
   d42d0:	60a3      	str	r3, [r4, #8]
   d42d2:	b91b      	cbnz	r3, d42dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d42d4:	6823      	ldr	r3, [r4, #0]
   d42d6:	4620      	mov	r0, r4
   d42d8:	68db      	ldr	r3, [r3, #12]
   d42da:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d42dc:	4628      	mov	r0, r5
   d42de:	bd38      	pop	{r3, r4, r5, pc}

000d42e0 <_Z17triggerPMReadingsv>:
    Serial.println("Feinstaubalarm: Error!");
  }
}

void triggerPMReadings()
{
   d42e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d42e2:	4c15      	ldr	r4, [pc, #84]	; (d4338 <_Z17triggerPMReadingsv+0x58>)
   d42e4:	4b15      	ldr	r3, [pc, #84]	; (d433c <_Z17triggerPMReadingsv+0x5c>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d42e6:	4916      	ldr	r1, [pc, #88]	; (d4340 <_Z17triggerPMReadingsv+0x60>)
   d42e8:	681a      	ldr	r2, [r3, #0]
   d42ea:	7823      	ldrb	r3, [r4, #0]
   d42ec:	f88d 3000 	strb.w	r3, [sp]
   d42f0:	a802      	add	r0, sp, #8
   d42f2:	233c      	movs	r3, #60	; 0x3c
   d42f4:	f000 fbfe 	bl	d4af4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d42f8:	a803      	add	r0, sp, #12
   d42fa:	f7ff ffdb 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d42fe:	4b11      	ldr	r3, [pc, #68]	; (d4344 <_Z17triggerPMReadingsv+0x64>)
   d4300:	4911      	ldr	r1, [pc, #68]	; (d4348 <_Z17triggerPMReadingsv+0x68>)
   d4302:	681a      	ldr	r2, [r3, #0]
   d4304:	7823      	ldrb	r3, [r4, #0]
   d4306:	f88d 3000 	strb.w	r3, [sp]
   d430a:	a802      	add	r0, sp, #8
   d430c:	233c      	movs	r3, #60	; 0x3c
   d430e:	f000 fbf1 	bl	d4af4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4312:	a803      	add	r0, sp, #12
   d4314:	f7ff ffce 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4318:	4b0c      	ldr	r3, [pc, #48]	; (d434c <_Z17triggerPMReadingsv+0x6c>)
   d431a:	490d      	ldr	r1, [pc, #52]	; (d4350 <_Z17triggerPMReadingsv+0x70>)
   d431c:	681a      	ldr	r2, [r3, #0]
   d431e:	7823      	ldrb	r3, [r4, #0]
   d4320:	f88d 3000 	strb.w	r3, [sp]
   d4324:	a802      	add	r0, sp, #8
   d4326:	233c      	movs	r3, #60	; 0x3c
   d4328:	f000 fbe4 	bl	d4af4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d432c:	a803      	add	r0, sp, #12
   d432e:	f7ff ffc1 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

  // Trigger interaction
  Particle.publish("PM10_K16", PM10_K16data, PRIVATE);
  Particle.publish("PM10_F43", PM10_F43data, PRIVATE);
  Particle.publish("Feinstaubalarm_Stuttgart", FeinstaubAlarmStatus, PRIVATE);
}
   d4332:	b004      	add	sp, #16
   d4334:	bd10      	pop	{r4, pc}
   d4336:	bf00      	nop
   d4338:	2003e3a8 	.word	0x2003e3a8
   d433c:	2003e384 	.word	0x2003e384
   d4340:	000d5f4e 	.word	0x000d5f4e
   d4344:	2003e398 	.word	0x2003e398
   d4348:	000d5f65 	.word	0x000d5f65
   d434c:	2003e374 	.word	0x2003e374
   d4350:	000d5f7c 	.word	0x000d5f7c

000d4354 <loop>:
  Particle.subscribe("hook-response/Feinstaubalarm_Stuttgart", AlarmHandler, MY_DEVICES);

}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4354:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // The core of your code will likely live here.

  triggerPMReadings();
   d4356:	f7ff ffc3 	bl	d42e0 <_Z17triggerPMReadingsv>
  delay(10000);
   d435a:	f242 7010 	movw	r0, #10000	; 0x2710
   d435e:	f000 fa75 	bl	d484c <delay>
  setdac(PM10_K16);
   d4362:	4908      	ldr	r1, [pc, #32]	; (d4384 <loop+0x30>)
   d4364:	4668      	mov	r0, sp
   d4366:	f001 f8a2 	bl	d54ae <_ZN6StringC1ERKS_>
   d436a:	4668      	mov	r0, sp
   d436c:	f7ff ff8a 	bl	d4284 <_Z6setdac6String>
   d4370:	4668      	mov	r0, sp
   d4372:	f001 f816 	bl	d53a2 <_ZN6StringD1Ev>
  delay(50000);
   d4376:	f24c 3050 	movw	r0, #50000	; 0xc350
   d437a:	f000 fa67 	bl	d484c <delay>

}
   d437e:	b005      	add	sp, #20
   d4380:	f85d fb04 	ldr.w	pc, [sp], #4
   d4384:	2003e3ac 	.word	0x2003e3ac

000d4388 <_GLOBAL__sub_I_led_pin>:
  if ((commandint >= 0) && (commandint <= 100))
  {
    commandint = map(commandint, 0, 100, 0, 255); //in low, high to out low, high
    analogWrite(pwm_pin, commandint, 500);
  }
   d4388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d438a:	4b1f      	ldr	r3, [pc, #124]	; (d4408 <_GLOBAL__sub_I_led_pin+0x80>)
int led_pin = D7;
int LED_FeinstaubAlarm = D1;
int pwm_pin = D2;
int pm10Switch = D0;

String PM10_K16data = String(10);
   d438c:	4e1f      	ldr	r6, [pc, #124]	; (d440c <_GLOBAL__sub_I_led_pin+0x84>)
   d438e:	4d20      	ldr	r5, [pc, #128]	; (d4410 <_GLOBAL__sub_I_led_pin+0x88>)
   d4390:	4c20      	ldr	r4, [pc, #128]	; (d4414 <_GLOBAL__sub_I_led_pin+0x8c>)
String PM10_F43data = String(10);
String PM10_K16 = "";
   d4392:	4f21      	ldr	r7, [pc, #132]	; (d4418 <_GLOBAL__sub_I_led_pin+0x90>)
   d4394:	2201      	movs	r2, #1
   d4396:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4398:	f000 f878 	bl	d448c <HAL_Pin_Map>
int led_pin = D7;
int LED_FeinstaubAlarm = D1;
int pwm_pin = D2;
int pm10Switch = D0;

String PM10_K16data = String(10);
   d439c:	220a      	movs	r2, #10
   d439e:	4611      	mov	r1, r2
   d43a0:	4630      	mov	r0, r6
   d43a2:	f001 f8a8 	bl	d54f6 <_ZN6StringC1Eih>
   d43a6:	462a      	mov	r2, r5
   d43a8:	4621      	mov	r1, r4
   d43aa:	4630      	mov	r0, r6
String PM10_F43data = String(10);
   d43ac:	4e1b      	ldr	r6, [pc, #108]	; (d441c <_GLOBAL__sub_I_led_pin+0x94>)
int led_pin = D7;
int LED_FeinstaubAlarm = D1;
int pwm_pin = D2;
int pm10Switch = D0;

String PM10_K16data = String(10);
   d43ae:	f001 fb59 	bl	d5a64 <__aeabi_atexit>
String PM10_F43data = String(10);
   d43b2:	220a      	movs	r2, #10
   d43b4:	4611      	mov	r1, r2
   d43b6:	4630      	mov	r0, r6
   d43b8:	f001 f89d 	bl	d54f6 <_ZN6StringC1Eih>
   d43bc:	4630      	mov	r0, r6
String PM10_K16 = "";
   d43be:	4e18      	ldr	r6, [pc, #96]	; (d4420 <_GLOBAL__sub_I_led_pin+0x98>)
int LED_FeinstaubAlarm = D1;
int pwm_pin = D2;
int pm10Switch = D0;

String PM10_K16data = String(10);
String PM10_F43data = String(10);
   d43c0:	462a      	mov	r2, r5
   d43c2:	4621      	mov	r1, r4
   d43c4:	f001 fb4e 	bl	d5a64 <__aeabi_atexit>
String PM10_K16 = "";
   d43c8:	4639      	mov	r1, r7
   d43ca:	4630      	mov	r0, r6
   d43cc:	f001 f830 	bl	d5430 <_ZN6StringC1EPK19__FlashStringHelper>
   d43d0:	4630      	mov	r0, r6
String PM10_F43 = "";
   d43d2:	4e14      	ldr	r6, [pc, #80]	; (d4424 <_GLOBAL__sub_I_led_pin+0x9c>)
int pwm_pin = D2;
int pm10Switch = D0;

String PM10_K16data = String(10);
String PM10_F43data = String(10);
String PM10_K16 = "";
   d43d4:	462a      	mov	r2, r5
   d43d6:	4621      	mov	r1, r4
   d43d8:	f001 fb44 	bl	d5a64 <__aeabi_atexit>
String PM10_F43 = "";
   d43dc:	4639      	mov	r1, r7
   d43de:	4630      	mov	r0, r6
   d43e0:	f001 f826 	bl	d5430 <_ZN6StringC1EPK19__FlashStringHelper>
   d43e4:	462a      	mov	r2, r5
   d43e6:	4621      	mov	r1, r4
   d43e8:	4630      	mov	r0, r6
String FeinstaubAlarmStatus = String(10);
   d43ea:	4e0f      	ldr	r6, [pc, #60]	; (d4428 <_GLOBAL__sub_I_led_pin+0xa0>)
int pm10Switch = D0;

String PM10_K16data = String(10);
String PM10_F43data = String(10);
String PM10_K16 = "";
String PM10_F43 = "";
   d43ec:	f001 fb3a 	bl	d5a64 <__aeabi_atexit>
String FeinstaubAlarmStatus = String(10);
   d43f0:	220a      	movs	r2, #10
   d43f2:	4611      	mov	r1, r2
   d43f4:	4630      	mov	r0, r6
   d43f6:	f001 f87e 	bl	d54f6 <_ZN6StringC1Eih>
   d43fa:	462a      	mov	r2, r5
   d43fc:	4621      	mov	r1, r4
   d43fe:	4630      	mov	r0, r6
  if ((commandint >= 0) && (commandint <= 100))
  {
    commandint = map(commandint, 0, 100, 0, 255); //in low, high to out low, high
    analogWrite(pwm_pin, commandint, 500);
  }
   d4400:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

String PM10_K16data = String(10);
String PM10_F43data = String(10);
String PM10_K16 = "";
String PM10_F43 = "";
String FeinstaubAlarmStatus = String(10);
   d4404:	f001 bb2e 	b.w	d5a64 <__aeabi_atexit>
   d4408:	2003e3a8 	.word	0x2003e3a8
   d440c:	2003e384 	.word	0x2003e384
   d4410:	2003e370 	.word	0x2003e370
   d4414:	000d53a3 	.word	0x000d53a3
   d4418:	000d603a 	.word	0x000d603a
   d441c:	2003e398 	.word	0x2003e398
   d4420:	2003e3ac 	.word	0x2003e3ac
   d4424:	2003e3bc 	.word	0x2003e3bc
   d4428:	2003e374 	.word	0x2003e374

000d442c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d442c:	b508      	push	{r3, lr}
   d442e:	4b02      	ldr	r3, [pc, #8]	; (d4438 <os_thread_is_current+0xc>)
   d4430:	681b      	ldr	r3, [r3, #0]
   d4432:	689b      	ldr	r3, [r3, #8]
   d4434:	9301      	str	r3, [sp, #4]
   d4436:	bd08      	pop	{r3, pc}
   d4438:	00030248 	.word	0x00030248

000d443c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d443c:	b508      	push	{r3, lr}
   d443e:	4b02      	ldr	r3, [pc, #8]	; (d4448 <os_thread_join+0xc>)
   d4440:	681b      	ldr	r3, [r3, #0]
   d4442:	691b      	ldr	r3, [r3, #16]
   d4444:	9301      	str	r3, [sp, #4]
   d4446:	bd08      	pop	{r3, pc}
   d4448:	00030248 	.word	0x00030248

000d444c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d444c:	b508      	push	{r3, lr}
   d444e:	4b02      	ldr	r3, [pc, #8]	; (d4458 <os_thread_cleanup+0xc>)
   d4450:	681b      	ldr	r3, [r3, #0]
   d4452:	695b      	ldr	r3, [r3, #20]
   d4454:	9301      	str	r3, [sp, #4]
   d4456:	bd08      	pop	{r3, pc}
   d4458:	00030248 	.word	0x00030248

000d445c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d445c:	b508      	push	{r3, lr}
   d445e:	4b02      	ldr	r3, [pc, #8]	; (d4468 <os_mutex_create+0xc>)
   d4460:	681b      	ldr	r3, [r3, #0]
   d4462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4464:	9301      	str	r3, [sp, #4]
   d4466:	bd08      	pop	{r3, pc}
   d4468:	00030248 	.word	0x00030248

000d446c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d446c:	b508      	push	{r3, lr}
   d446e:	4b02      	ldr	r3, [pc, #8]	; (d4478 <os_mutex_recursive_create+0xc>)
   d4470:	681b      	ldr	r3, [r3, #0]
   d4472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4474:	9301      	str	r3, [sp, #4]
   d4476:	bd08      	pop	{r3, pc}
   d4478:	00030248 	.word	0x00030248

000d447c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d447c:	b508      	push	{r3, lr}
   d447e:	4b02      	ldr	r3, [pc, #8]	; (d4488 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4480:	681b      	ldr	r3, [r3, #0]
   d4482:	695b      	ldr	r3, [r3, #20]
   d4484:	9301      	str	r3, [sp, #4]
   d4486:	bd08      	pop	{r3, pc}
   d4488:	00030218 	.word	0x00030218

000d448c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d448c:	b508      	push	{r3, lr}
   d448e:	4b02      	ldr	r3, [pc, #8]	; (d4498 <HAL_Pin_Map+0xc>)
   d4490:	681b      	ldr	r3, [r3, #0]
   d4492:	681b      	ldr	r3, [r3, #0]
   d4494:	9301      	str	r3, [sp, #4]
   d4496:	bd08      	pop	{r3, pc}
   d4498:	0003022c 	.word	0x0003022c

000d449c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d449c:	b508      	push	{r3, lr}
   d449e:	4b02      	ldr	r3, [pc, #8]	; (d44a8 <HAL_Validate_Pin_Function+0xc>)
   d44a0:	681b      	ldr	r3, [r3, #0]
   d44a2:	685b      	ldr	r3, [r3, #4]
   d44a4:	9301      	str	r3, [sp, #4]
   d44a6:	bd08      	pop	{r3, pc}
   d44a8:	0003022c 	.word	0x0003022c

000d44ac <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d44ac:	b508      	push	{r3, lr}
   d44ae:	4b02      	ldr	r3, [pc, #8]	; (d44b8 <HAL_Pin_Mode+0xc>)
   d44b0:	681b      	ldr	r3, [r3, #0]
   d44b2:	689b      	ldr	r3, [r3, #8]
   d44b4:	9301      	str	r3, [sp, #4]
   d44b6:	bd08      	pop	{r3, pc}
   d44b8:	0003022c 	.word	0x0003022c

000d44bc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d44bc:	b508      	push	{r3, lr}
   d44be:	4b02      	ldr	r3, [pc, #8]	; (d44c8 <HAL_Get_Pin_Mode+0xc>)
   d44c0:	681b      	ldr	r3, [r3, #0]
   d44c2:	68db      	ldr	r3, [r3, #12]
   d44c4:	9301      	str	r3, [sp, #4]
   d44c6:	bd08      	pop	{r3, pc}
   d44c8:	0003022c 	.word	0x0003022c

000d44cc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d44cc:	b508      	push	{r3, lr}
   d44ce:	4b02      	ldr	r3, [pc, #8]	; (d44d8 <HAL_GPIO_Write+0xc>)
   d44d0:	681b      	ldr	r3, [r3, #0]
   d44d2:	691b      	ldr	r3, [r3, #16]
   d44d4:	9301      	str	r3, [sp, #4]
   d44d6:	bd08      	pop	{r3, pc}
   d44d8:	0003022c 	.word	0x0003022c

000d44dc <HAL_PWM_Write_With_Frequency_Ext>:
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
DYNALIB_FN(31, hal_gpio, HAL_PWM_Write_With_Frequency_Ext, void(uint16_t, uint32_t, uint32_t))
   d44dc:	b508      	push	{r3, lr}
   d44de:	4b02      	ldr	r3, [pc, #8]	; (d44e8 <HAL_PWM_Write_With_Frequency_Ext+0xc>)
   d44e0:	681b      	ldr	r3, [r3, #0]
   d44e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d44e4:	9301      	str	r3, [sp, #4]
   d44e6:	bd08      	pop	{r3, pc}
   d44e8:	0003022c 	.word	0x0003022c

000d44ec <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d44ec:	b508      	push	{r3, lr}
   d44ee:	4b02      	ldr	r3, [pc, #8]	; (d44f8 <HAL_I2C_Write_Data+0xc>)
   d44f0:	681b      	ldr	r3, [r3, #0]
   d44f2:	6a1b      	ldr	r3, [r3, #32]
   d44f4:	9301      	str	r3, [sp, #4]
   d44f6:	bd08      	pop	{r3, pc}
   d44f8:	00030228 	.word	0x00030228

000d44fc <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d44fc:	b508      	push	{r3, lr}
   d44fe:	4b02      	ldr	r3, [pc, #8]	; (d4508 <HAL_I2C_Available_Data+0xc>)
   d4500:	681b      	ldr	r3, [r3, #0]
   d4502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4504:	9301      	str	r3, [sp, #4]
   d4506:	bd08      	pop	{r3, pc}
   d4508:	00030228 	.word	0x00030228

000d450c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d450c:	b508      	push	{r3, lr}
   d450e:	4b02      	ldr	r3, [pc, #8]	; (d4518 <HAL_I2C_Read_Data+0xc>)
   d4510:	681b      	ldr	r3, [r3, #0]
   d4512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4514:	9301      	str	r3, [sp, #4]
   d4516:	bd08      	pop	{r3, pc}
   d4518:	00030228 	.word	0x00030228

000d451c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d451c:	b508      	push	{r3, lr}
   d451e:	4b02      	ldr	r3, [pc, #8]	; (d4528 <HAL_I2C_Peek_Data+0xc>)
   d4520:	681b      	ldr	r3, [r3, #0]
   d4522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4524:	9301      	str	r3, [sp, #4]
   d4526:	bd08      	pop	{r3, pc}
   d4528:	00030228 	.word	0x00030228

000d452c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d452c:	b508      	push	{r3, lr}
   d452e:	4b02      	ldr	r3, [pc, #8]	; (d4538 <HAL_I2C_Flush_Data+0xc>)
   d4530:	681b      	ldr	r3, [r3, #0]
   d4532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4534:	9301      	str	r3, [sp, #4]
   d4536:	bd08      	pop	{r3, pc}
   d4538:	00030228 	.word	0x00030228

000d453c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d453c:	b508      	push	{r3, lr}
   d453e:	4b02      	ldr	r3, [pc, #8]	; (d4548 <HAL_I2C_Is_Enabled+0xc>)
   d4540:	681b      	ldr	r3, [r3, #0]
   d4542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4544:	9301      	str	r3, [sp, #4]
   d4546:	bd08      	pop	{r3, pc}
   d4548:	00030228 	.word	0x00030228

000d454c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d454c:	b508      	push	{r3, lr}
   d454e:	4b02      	ldr	r3, [pc, #8]	; (d4558 <HAL_I2C_Init+0xc>)
   d4550:	681b      	ldr	r3, [r3, #0]
   d4552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4554:	9301      	str	r3, [sp, #4]
   d4556:	bd08      	pop	{r3, pc}
   d4558:	00030228 	.word	0x00030228

000d455c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d455c:	b508      	push	{r3, lr}
   d455e:	4b02      	ldr	r3, [pc, #8]	; (d4568 <inet_inet_ntop+0xc>)
   d4560:	681b      	ldr	r3, [r3, #0]
   d4562:	695b      	ldr	r3, [r3, #20]
   d4564:	9301      	str	r3, [sp, #4]
   d4566:	bd08      	pop	{r3, pc}
   d4568:	00030264 	.word	0x00030264

000d456c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d456c:	b508      	push	{r3, lr}
   d456e:	4b02      	ldr	r3, [pc, #8]	; (d4578 <netdb_freeaddrinfo+0xc>)
   d4570:	681b      	ldr	r3, [r3, #0]
   d4572:	689b      	ldr	r3, [r3, #8]
   d4574:	9301      	str	r3, [sp, #4]
   d4576:	bd08      	pop	{r3, pc}
   d4578:	00030268 	.word	0x00030268

000d457c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d457c:	b508      	push	{r3, lr}
   d457e:	4b02      	ldr	r3, [pc, #8]	; (d4588 <netdb_getaddrinfo+0xc>)
   d4580:	681b      	ldr	r3, [r3, #0]
   d4582:	68db      	ldr	r3, [r3, #12]
   d4584:	9301      	str	r3, [sp, #4]
   d4586:	bd08      	pop	{r3, pc}
   d4588:	00030268 	.word	0x00030268

000d458c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d458c:	b508      	push	{r3, lr}
   d458e:	4b02      	ldr	r3, [pc, #8]	; (d4598 <HAL_SPI_Init+0xc>)
   d4590:	681b      	ldr	r3, [r3, #0]
   d4592:	69db      	ldr	r3, [r3, #28]
   d4594:	9301      	str	r3, [sp, #4]
   d4596:	bd08      	pop	{r3, pc}
   d4598:	00030230 	.word	0x00030230

000d459c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d459c:	b508      	push	{r3, lr}
   d459e:	4b02      	ldr	r3, [pc, #8]	; (d45a8 <HAL_SPI_Is_Enabled+0xc>)
   d45a0:	681b      	ldr	r3, [r3, #0]
   d45a2:	6a1b      	ldr	r3, [r3, #32]
   d45a4:	9301      	str	r3, [sp, #4]
   d45a6:	bd08      	pop	{r3, pc}
   d45a8:	00030230 	.word	0x00030230

000d45ac <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d45ac:	b508      	push	{r3, lr}
   d45ae:	4b02      	ldr	r3, [pc, #8]	; (d45b8 <HAL_USART_Init+0xc>)
   d45b0:	681b      	ldr	r3, [r3, #0]
   d45b2:	681b      	ldr	r3, [r3, #0]
   d45b4:	9301      	str	r3, [sp, #4]
   d45b6:	bd08      	pop	{r3, pc}
   d45b8:	0003023c 	.word	0x0003023c

000d45bc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d45bc:	b508      	push	{r3, lr}
   d45be:	4b02      	ldr	r3, [pc, #8]	; (d45c8 <HAL_USART_Write_Data+0xc>)
   d45c0:	681b      	ldr	r3, [r3, #0]
   d45c2:	68db      	ldr	r3, [r3, #12]
   d45c4:	9301      	str	r3, [sp, #4]
   d45c6:	bd08      	pop	{r3, pc}
   d45c8:	0003023c 	.word	0x0003023c

000d45cc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d45cc:	b508      	push	{r3, lr}
   d45ce:	4b02      	ldr	r3, [pc, #8]	; (d45d8 <HAL_USART_Available_Data+0xc>)
   d45d0:	681b      	ldr	r3, [r3, #0]
   d45d2:	691b      	ldr	r3, [r3, #16]
   d45d4:	9301      	str	r3, [sp, #4]
   d45d6:	bd08      	pop	{r3, pc}
   d45d8:	0003023c 	.word	0x0003023c

000d45dc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d45dc:	b508      	push	{r3, lr}
   d45de:	4b02      	ldr	r3, [pc, #8]	; (d45e8 <HAL_USART_Read_Data+0xc>)
   d45e0:	681b      	ldr	r3, [r3, #0]
   d45e2:	695b      	ldr	r3, [r3, #20]
   d45e4:	9301      	str	r3, [sp, #4]
   d45e6:	bd08      	pop	{r3, pc}
   d45e8:	0003023c 	.word	0x0003023c

000d45ec <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d45ec:	b508      	push	{r3, lr}
   d45ee:	4b02      	ldr	r3, [pc, #8]	; (d45f8 <HAL_USART_Peek_Data+0xc>)
   d45f0:	681b      	ldr	r3, [r3, #0]
   d45f2:	699b      	ldr	r3, [r3, #24]
   d45f4:	9301      	str	r3, [sp, #4]
   d45f6:	bd08      	pop	{r3, pc}
   d45f8:	0003023c 	.word	0x0003023c

000d45fc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d45fc:	b508      	push	{r3, lr}
   d45fe:	4b02      	ldr	r3, [pc, #8]	; (d4608 <HAL_USART_Flush_Data+0xc>)
   d4600:	681b      	ldr	r3, [r3, #0]
   d4602:	69db      	ldr	r3, [r3, #28]
   d4604:	9301      	str	r3, [sp, #4]
   d4606:	bd08      	pop	{r3, pc}
   d4608:	0003023c 	.word	0x0003023c

000d460c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d460c:	b508      	push	{r3, lr}
   d460e:	4b02      	ldr	r3, [pc, #8]	; (d4618 <HAL_USART_Is_Enabled+0xc>)
   d4610:	681b      	ldr	r3, [r3, #0]
   d4612:	6a1b      	ldr	r3, [r3, #32]
   d4614:	9301      	str	r3, [sp, #4]
   d4616:	bd08      	pop	{r3, pc}
   d4618:	0003023c 	.word	0x0003023c

000d461c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d461c:	b508      	push	{r3, lr}
   d461e:	4b02      	ldr	r3, [pc, #8]	; (d4628 <HAL_USART_Available_Data_For_Write+0xc>)
   d4620:	681b      	ldr	r3, [r3, #0]
   d4622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4624:	9301      	str	r3, [sp, #4]
   d4626:	bd08      	pop	{r3, pc}
   d4628:	0003023c 	.word	0x0003023c

000d462c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d462c:	b508      	push	{r3, lr}
   d462e:	4b02      	ldr	r3, [pc, #8]	; (d4638 <HAL_USB_USART_Init+0xc>)
   d4630:	681b      	ldr	r3, [r3, #0]
   d4632:	681b      	ldr	r3, [r3, #0]
   d4634:	9301      	str	r3, [sp, #4]
   d4636:	bd08      	pop	{r3, pc}
   d4638:	0003024c 	.word	0x0003024c

000d463c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d463c:	b508      	push	{r3, lr}
   d463e:	4b02      	ldr	r3, [pc, #8]	; (d4648 <HAL_USB_USART_Begin+0xc>)
   d4640:	681b      	ldr	r3, [r3, #0]
   d4642:	685b      	ldr	r3, [r3, #4]
   d4644:	9301      	str	r3, [sp, #4]
   d4646:	bd08      	pop	{r3, pc}
   d4648:	0003024c 	.word	0x0003024c

000d464c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d464c:	b508      	push	{r3, lr}
   d464e:	4b02      	ldr	r3, [pc, #8]	; (d4658 <HAL_USB_USART_Available_Data+0xc>)
   d4650:	681b      	ldr	r3, [r3, #0]
   d4652:	691b      	ldr	r3, [r3, #16]
   d4654:	9301      	str	r3, [sp, #4]
   d4656:	bd08      	pop	{r3, pc}
   d4658:	0003024c 	.word	0x0003024c

000d465c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d465c:	b508      	push	{r3, lr}
   d465e:	4b02      	ldr	r3, [pc, #8]	; (d4668 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4660:	681b      	ldr	r3, [r3, #0]
   d4662:	695b      	ldr	r3, [r3, #20]
   d4664:	9301      	str	r3, [sp, #4]
   d4666:	bd08      	pop	{r3, pc}
   d4668:	0003024c 	.word	0x0003024c

000d466c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d466c:	b508      	push	{r3, lr}
   d466e:	4b02      	ldr	r3, [pc, #8]	; (d4678 <HAL_USB_USART_Receive_Data+0xc>)
   d4670:	681b      	ldr	r3, [r3, #0]
   d4672:	699b      	ldr	r3, [r3, #24]
   d4674:	9301      	str	r3, [sp, #4]
   d4676:	bd08      	pop	{r3, pc}
   d4678:	0003024c 	.word	0x0003024c

000d467c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d467c:	b508      	push	{r3, lr}
   d467e:	4b02      	ldr	r3, [pc, #8]	; (d4688 <HAL_USB_USART_Send_Data+0xc>)
   d4680:	681b      	ldr	r3, [r3, #0]
   d4682:	69db      	ldr	r3, [r3, #28]
   d4684:	9301      	str	r3, [sp, #4]
   d4686:	bd08      	pop	{r3, pc}
   d4688:	0003024c 	.word	0x0003024c

000d468c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d468c:	b508      	push	{r3, lr}
   d468e:	4b02      	ldr	r3, [pc, #8]	; (d4698 <HAL_USB_USART_Flush_Data+0xc>)
   d4690:	681b      	ldr	r3, [r3, #0]
   d4692:	6a1b      	ldr	r3, [r3, #32]
   d4694:	9301      	str	r3, [sp, #4]
   d4696:	bd08      	pop	{r3, pc}
   d4698:	0003024c 	.word	0x0003024c

000d469c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d469c:	b508      	push	{r3, lr}
   d469e:	4b02      	ldr	r3, [pc, #8]	; (d46a8 <set_system_mode+0xc>)
   d46a0:	681b      	ldr	r3, [r3, #0]
   d46a2:	685b      	ldr	r3, [r3, #4]
   d46a4:	9301      	str	r3, [sp, #4]
   d46a6:	bd08      	pop	{r3, pc}
   d46a8:	00030220 	.word	0x00030220

000d46ac <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d46ac:	b508      	push	{r3, lr}
   d46ae:	4b02      	ldr	r3, [pc, #8]	; (d46b8 <system_delay_ms+0xc>)
   d46b0:	681b      	ldr	r3, [r3, #0]
   d46b2:	695b      	ldr	r3, [r3, #20]
   d46b4:	9301      	str	r3, [sp, #4]
   d46b6:	bd08      	pop	{r3, pc}
   d46b8:	00030220 	.word	0x00030220

000d46bc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d46bc:	b508      	push	{r3, lr}
   d46be:	4b02      	ldr	r3, [pc, #8]	; (d46c8 <application_thread_current+0xc>)
   d46c0:	681b      	ldr	r3, [r3, #0]
   d46c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d46c4:	9301      	str	r3, [sp, #4]
   d46c6:	bd08      	pop	{r3, pc}
   d46c8:	00030220 	.word	0x00030220

000d46cc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d46cc:	b508      	push	{r3, lr}
   d46ce:	4b02      	ldr	r3, [pc, #8]	; (d46d8 <application_thread_invoke+0xc>)
   d46d0:	681b      	ldr	r3, [r3, #0]
   d46d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d46d4:	9301      	str	r3, [sp, #4]
   d46d6:	bd08      	pop	{r3, pc}
   d46d8:	00030220 	.word	0x00030220

000d46dc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d46dc:	b508      	push	{r3, lr}
   d46de:	4b03      	ldr	r3, [pc, #12]	; (d46ec <system_ctrl_set_app_request_handler+0x10>)
   d46e0:	681b      	ldr	r3, [r3, #0]
   d46e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d46e6:	9301      	str	r3, [sp, #4]
   d46e8:	bd08      	pop	{r3, pc}
   d46ea:	0000      	.short	0x0000
   d46ec:	00030220 	.word	0x00030220

000d46f0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d46f0:	b508      	push	{r3, lr}
   d46f2:	4b03      	ldr	r3, [pc, #12]	; (d4700 <system_ctrl_set_result+0x10>)
   d46f4:	681b      	ldr	r3, [r3, #0]
   d46f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d46fa:	9301      	str	r3, [sp, #4]
   d46fc:	bd08      	pop	{r3, pc}
   d46fe:	0000      	.short	0x0000
   d4700:	00030220 	.word	0x00030220

000d4704 <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <spark_send_event+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	6a1b      	ldr	r3, [r3, #32]
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	00030244 	.word	0x00030244

000d4714 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <spark_subscribe+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	00030244 	.word	0x00030244

000d4724 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b02      	ldr	r3, [pc, #8]	; (d4730 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	00030244 	.word	0x00030244

000d4734 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4734:	b508      	push	{r3, lr}
   d4736:	4b02      	ldr	r3, [pc, #8]	; (d4740 <network_connect+0xc>)
   d4738:	681b      	ldr	r3, [r3, #0]
   d473a:	685b      	ldr	r3, [r3, #4]
   d473c:	9301      	str	r3, [sp, #4]
   d473e:	bd08      	pop	{r3, pc}
   d4740:	00030240 	.word	0x00030240

000d4744 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4744:	b508      	push	{r3, lr}
   d4746:	4b02      	ldr	r3, [pc, #8]	; (d4750 <network_connecting+0xc>)
   d4748:	681b      	ldr	r3, [r3, #0]
   d474a:	689b      	ldr	r3, [r3, #8]
   d474c:	9301      	str	r3, [sp, #4]
   d474e:	bd08      	pop	{r3, pc}
   d4750:	00030240 	.word	0x00030240

000d4754 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4754:	b508      	push	{r3, lr}
   d4756:	4b02      	ldr	r3, [pc, #8]	; (d4760 <network_disconnect+0xc>)
   d4758:	681b      	ldr	r3, [r3, #0]
   d475a:	68db      	ldr	r3, [r3, #12]
   d475c:	9301      	str	r3, [sp, #4]
   d475e:	bd08      	pop	{r3, pc}
   d4760:	00030240 	.word	0x00030240

000d4764 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4764:	b508      	push	{r3, lr}
   d4766:	4b02      	ldr	r3, [pc, #8]	; (d4770 <network_ready+0xc>)
   d4768:	681b      	ldr	r3, [r3, #0]
   d476a:	691b      	ldr	r3, [r3, #16]
   d476c:	9301      	str	r3, [sp, #4]
   d476e:	bd08      	pop	{r3, pc}
   d4770:	00030240 	.word	0x00030240

000d4774 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4774:	b508      	push	{r3, lr}
   d4776:	4b02      	ldr	r3, [pc, #8]	; (d4780 <network_on+0xc>)
   d4778:	681b      	ldr	r3, [r3, #0]
   d477a:	695b      	ldr	r3, [r3, #20]
   d477c:	9301      	str	r3, [sp, #4]
   d477e:	bd08      	pop	{r3, pc}
   d4780:	00030240 	.word	0x00030240

000d4784 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4784:	b508      	push	{r3, lr}
   d4786:	4b02      	ldr	r3, [pc, #8]	; (d4790 <network_off+0xc>)
   d4788:	681b      	ldr	r3, [r3, #0]
   d478a:	699b      	ldr	r3, [r3, #24]
   d478c:	9301      	str	r3, [sp, #4]
   d478e:	bd08      	pop	{r3, pc}
   d4790:	00030240 	.word	0x00030240

000d4794 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4794:	b508      	push	{r3, lr}
   d4796:	4b02      	ldr	r3, [pc, #8]	; (d47a0 <network_listen+0xc>)
   d4798:	681b      	ldr	r3, [r3, #0]
   d479a:	69db      	ldr	r3, [r3, #28]
   d479c:	9301      	str	r3, [sp, #4]
   d479e:	bd08      	pop	{r3, pc}
   d47a0:	00030240 	.word	0x00030240

000d47a4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d47a4:	b508      	push	{r3, lr}
   d47a6:	4b02      	ldr	r3, [pc, #8]	; (d47b0 <network_listening+0xc>)
   d47a8:	681b      	ldr	r3, [r3, #0]
   d47aa:	6a1b      	ldr	r3, [r3, #32]
   d47ac:	9301      	str	r3, [sp, #4]
   d47ae:	bd08      	pop	{r3, pc}
   d47b0:	00030240 	.word	0x00030240

000d47b4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d47b4:	b508      	push	{r3, lr}
   d47b6:	4b02      	ldr	r3, [pc, #8]	; (d47c0 <network_set_listen_timeout+0xc>)
   d47b8:	681b      	ldr	r3, [r3, #0]
   d47ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47bc:	9301      	str	r3, [sp, #4]
   d47be:	bd08      	pop	{r3, pc}
   d47c0:	00030240 	.word	0x00030240

000d47c4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d47c4:	b508      	push	{r3, lr}
   d47c6:	4b02      	ldr	r3, [pc, #8]	; (d47d0 <network_get_listen_timeout+0xc>)
   d47c8:	681b      	ldr	r3, [r3, #0]
   d47ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d47cc:	9301      	str	r3, [sp, #4]
   d47ce:	bd08      	pop	{r3, pc}
   d47d0:	00030240 	.word	0x00030240

000d47d4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d47d4:	b508      	push	{r3, lr}
   d47d6:	4b02      	ldr	r3, [pc, #8]	; (d47e0 <malloc+0xc>)
   d47d8:	681b      	ldr	r3, [r3, #0]
   d47da:	681b      	ldr	r3, [r3, #0]
   d47dc:	9301      	str	r3, [sp, #4]
   d47de:	bd08      	pop	{r3, pc}
   d47e0:	0003021c 	.word	0x0003021c

000d47e4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d47e4:	b508      	push	{r3, lr}
   d47e6:	4b02      	ldr	r3, [pc, #8]	; (d47f0 <free+0xc>)
   d47e8:	681b      	ldr	r3, [r3, #0]
   d47ea:	685b      	ldr	r3, [r3, #4]
   d47ec:	9301      	str	r3, [sp, #4]
   d47ee:	bd08      	pop	{r3, pc}
   d47f0:	0003021c 	.word	0x0003021c

000d47f4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d47f4:	b508      	push	{r3, lr}
   d47f6:	4b02      	ldr	r3, [pc, #8]	; (d4800 <realloc+0xc>)
   d47f8:	681b      	ldr	r3, [r3, #0]
   d47fa:	689b      	ldr	r3, [r3, #8]
   d47fc:	9301      	str	r3, [sp, #4]
   d47fe:	bd08      	pop	{r3, pc}
   d4800:	0003021c 	.word	0x0003021c

000d4804 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4804:	b508      	push	{r3, lr}
   d4806:	4b02      	ldr	r3, [pc, #8]	; (d4810 <vsnprintf+0xc>)
   d4808:	681b      	ldr	r3, [r3, #0]
   d480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d480c:	9301      	str	r3, [sp, #4]
   d480e:	bd08      	pop	{r3, pc}
   d4810:	0003021c 	.word	0x0003021c

000d4814 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4814:	b508      	push	{r3, lr}
   d4816:	4b02      	ldr	r3, [pc, #8]	; (d4820 <abort+0xc>)
   d4818:	681b      	ldr	r3, [r3, #0]
   d481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d481c:	9301      	str	r3, [sp, #4]
   d481e:	bd08      	pop	{r3, pc}
   d4820:	0003021c 	.word	0x0003021c

000d4824 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4824:	b508      	push	{r3, lr}
   d4826:	4b02      	ldr	r3, [pc, #8]	; (d4830 <_malloc_r+0xc>)
   d4828:	681b      	ldr	r3, [r3, #0]
   d482a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d482c:	9301      	str	r3, [sp, #4]
   d482e:	bd08      	pop	{r3, pc}
   d4830:	0003021c 	.word	0x0003021c

000d4834 <_Z3mapiiiii>:
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d4834:	428a      	cmp	r2, r1
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
   d4836:	b530      	push	{r4, r5, lr}
    if (fromEnd == fromStart) {
   d4838:	d007      	beq.n	d484a <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d483a:	9d03      	ldr	r5, [sp, #12]
   d483c:	1a44      	subs	r4, r0, r1
   d483e:	1aed      	subs	r5, r5, r3
   d4840:	436c      	muls	r4, r5
   d4842:	1a52      	subs	r2, r2, r1
   d4844:	fb94 f4f2 	sdiv	r4, r4, r2
   d4848:	18e0      	adds	r0, r4, r3
}
   d484a:	bd30      	pop	{r4, r5, pc}

000d484c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d484c:	2100      	movs	r1, #0
   d484e:	f7ff bf2d 	b.w	d46ac <system_delay_ms>

000d4852 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4852:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4854:	6883      	ldr	r3, [r0, #8]
   d4856:	4604      	mov	r4, r0
   d4858:	b90b      	cbnz	r3, d485e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d485a:	f001 f908 	bl	d5a6e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d485e:	68c3      	ldr	r3, [r0, #12]
   d4860:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4862:	68a3      	ldr	r3, [r4, #8]
   d4864:	b11b      	cbz	r3, d486e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4866:	2203      	movs	r2, #3
   d4868:	4621      	mov	r1, r4
   d486a:	4620      	mov	r0, r4
   d486c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d486e:	4620      	mov	r0, r4
}
   d4870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4874:	f7ff bc11 	b.w	d409a <_ZdlPv>

000d4878 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4878:	4770      	bx	lr

000d487a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d487a:	2000      	movs	r0, #0
   d487c:	4770      	bx	lr

000d487e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d487e:	b510      	push	{r4, lr}
   d4880:	4604      	mov	r4, r0
   d4882:	f7ff fc0a 	bl	d409a <_ZdlPv>
   d4886:	4620      	mov	r0, r4
   d4888:	bd10      	pop	{r4, pc}

000d488a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d488a:	b508      	push	{r3, lr}
      { delete this; }
   d488c:	b108      	cbz	r0, d4892 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d488e:	f7ff fff6 	bl	d487e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4892:	bd08      	pop	{r3, pc}

000d4894 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4894:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4896:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4898:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d489a:	b113      	cbz	r3, d48a2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d489c:	2203      	movs	r2, #3
   d489e:	4601      	mov	r1, r0
   d48a0:	4798      	blx	r3
    }
   d48a2:	4620      	mov	r0, r4
   d48a4:	bd10      	pop	{r4, pc}

000d48a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d48a6:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d48a8:	68c4      	ldr	r4, [r0, #12]
   d48aa:	b1d4      	cbz	r4, d48e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d48ac:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d48ae:	2b02      	cmp	r3, #2
   d48b0:	d102      	bne.n	d48b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d48b2:	68e0      	ldr	r0, [r4, #12]
   d48b4:	f7ff ff96 	bl	d47e4 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d48b8:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d48ba:	b12d      	cbz	r5, d48c8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d48bc:	4628      	mov	r0, r5
   d48be:	f7ff ffe9 	bl	d4894 <_ZNSt14_Function_baseD1Ev>
   d48c2:	4628      	mov	r0, r5
   d48c4:	f7ff fbe9 	bl	d409a <_ZdlPv>
   d48c8:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d48ca:	b12d      	cbz	r5, d48d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
   d48cc:	4628      	mov	r0, r5
   d48ce:	f7ff ffe1 	bl	d4894 <_ZNSt14_Function_baseD1Ev>
   d48d2:	4628      	mov	r0, r5
   d48d4:	f7ff fbe1 	bl	d409a <_ZdlPv>
   d48d8:	4620      	mov	r0, r4
   d48da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d48de:	f7ff bbdc 	b.w	d409a <_ZdlPv>
   d48e2:	bd38      	pop	{r3, r4, r5, pc}

000d48e4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d48e4:	b513      	push	{r0, r1, r4, lr}
   d48e6:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d48e8:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d48ec:	2300      	movs	r3, #0
   d48ee:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d48f0:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d48f2:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d48f4:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d48f6:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d48f8:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d48fa:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d48fc:	f7ff fcda 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4900:	4620      	mov	r0, r4
   d4902:	b002      	add	sp, #8
   d4904:	bd10      	pop	{r4, pc}

000d4906 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4906:	680b      	ldr	r3, [r1, #0]
   d4908:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d490a:	b113      	cbz	r3, d4912 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d490c:	685a      	ldr	r2, [r3, #4]
   d490e:	3201      	adds	r2, #1
   d4910:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4912:	4770      	bx	lr

000d4914 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4916:	460c      	mov	r4, r1
   d4918:	ad02      	add	r5, sp, #8
   d491a:	f854 3b04 	ldr.w	r3, [r4], #4
   d491e:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4922:	4606      	mov	r6, r0
   d4924:	460f      	mov	r7, r1
   d4926:	a801      	add	r0, sp, #4
   d4928:	4621      	mov	r1, r4
   d492a:	f7ff ffec 	bl	d4906 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d492e:	4629      	mov	r1, r5
   d4930:	4630      	mov	r0, r6
   d4932:	f7ff ffd7 	bl	d48e4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4936:	a801      	add	r0, sp, #4
   d4938:	f7ff fcbc 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d493c:	4620      	mov	r0, r4
   d493e:	f7ff fcb9 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4942:	4638      	mov	r0, r7
   d4944:	f7ff fba9 	bl	d409a <_ZdlPv>
        return p;
    }
   d4948:	4630      	mov	r0, r6
   d494a:	b003      	add	sp, #12
   d494c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d494e <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d494e:	b513      	push	{r0, r1, r4, lr}
   d4950:	460b      	mov	r3, r1
   d4952:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4954:	c803      	ldmia	r0, {r0, r1}
   d4956:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d495a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d495e:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4962:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4966:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d496a:	b002      	add	sp, #8
   d496c:	bd10      	pop	{r4, pc}

000d496e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d496e:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4970:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4972:	b90a      	cbnz	r2, d4978 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4974:	f001 f87b 	bl	d5a6e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4978:	68c3      	ldr	r3, [r0, #12]
    }
   d497a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d497e:	4718      	bx	r3

000d4980 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4980:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4982:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4984:	f100 0110 	add.w	r1, r0, #16
   d4988:	f7ff fff1 	bl	d496e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d498c:	bd08      	pop	{r3, pc}

000d498e <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d498e:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4990:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4992:	b90a      	cbnz	r2, d4998 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4994:	f001 f86b 	bl	d5a6e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4998:	68c3      	ldr	r3, [r0, #12]
    }
   d499a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d499e:	4718      	bx	r3

000d49a0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d49a0:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d49a2:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d49a4:	f100 0110 	add.w	r1, r0, #16
   d49a8:	f7ff fff1 	bl	d498e <_ZNKSt8functionIFvRKbEEclES1_>
   d49ac:	bd08      	pop	{r3, pc}

000d49ae <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d49ae:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d49b0:	2300      	movs	r3, #0
   d49b2:	6083      	str	r3, [r0, #8]
   d49b4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d49b6:	4604      	mov	r4, r0
   d49b8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d49ba:	b12b      	cbz	r3, d49c8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d49bc:	2202      	movs	r2, #2
   d49be:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d49c0:	68eb      	ldr	r3, [r5, #12]
   d49c2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d49c4:	68ab      	ldr	r3, [r5, #8]
   d49c6:	60a3      	str	r3, [r4, #8]
	}
    }
   d49c8:	4620      	mov	r0, r4
   d49ca:	bd38      	pop	{r3, r4, r5, pc}

000d49cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d49cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d49d0:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d49d4:	b086      	sub	sp, #24
   d49d6:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d49d8:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d49dc:	808b      	strh	r3, [r1, #4]
   d49de:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d49e0:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d49e2:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d49e6:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d49e8:	f04f 0002 	mov.w	r0, #2
   d49ec:	e8d4 1f4f 	ldrexb	r1, [r4]
   d49f0:	4299      	cmp	r1, r3
   d49f2:	d103      	bne.n	d49fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d49f4:	e8c4 0f45 	strexb	r5, r0, [r4]
   d49f8:	2d00      	cmp	r5, #0
   d49fa:	d1f7      	bne.n	d49ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d49fc:	d002      	beq.n	d4a04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d49fe:	f88d 1000 	strb.w	r1, [sp]
   d4a02:	e06a      	b.n	d4ada <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4a04:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4a08:	bf1e      	ittt	ne
   d4a0a:	60e7      	strne	r7, [r4, #12]
   d4a0c:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d4a0e:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4a10:	2301      	movs	r3, #1
   d4a12:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4a16:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4a18:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4a1a:	f104 0308 	add.w	r3, r4, #8
   d4a1e:	f3bf 8f5f 	dmb	sy
   d4a22:	e853 6f00 	ldrex	r6, [r3]
   d4a26:	e843 0200 	strex	r2, r0, [r3]
   d4a2a:	2a00      	cmp	r2, #0
   d4a2c:	d1f9      	bne.n	d4a22 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d4a2e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4a32:	2e00      	cmp	r6, #0
   d4a34:	d051      	beq.n	d4ada <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4a36:	f7ff fe41 	bl	d46bc <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4a3a:	b120      	cbz	r0, d4a46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4a3c:	4629      	mov	r1, r5
   d4a3e:	4630      	mov	r0, r6
   d4a40:	f7ff ff95 	bl	d496e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4a44:	e043      	b.n	d4ace <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4a46:	4631      	mov	r1, r6
   d4a48:	4668      	mov	r0, sp
   d4a4a:	f7ff ffb0 	bl	d49ae <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4a4e:	68e0      	ldr	r0, [r4, #12]
   d4a50:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4a54:	b108      	cbz	r0, d4a5a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d4a56:	f001 f98d 	bl	d5d74 <strdup>
   d4a5a:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4a5c:	2010      	movs	r0, #16
   d4a5e:	f8ad 5014 	strh.w	r5, [sp, #20]
   d4a62:	f7ff fb18 	bl	d4096 <_Znwj>
   d4a66:	4605      	mov	r5, r0
   d4a68:	b330      	cbz	r0, d4ab8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4a6a:	f04f 0800 	mov.w	r8, #0
   d4a6e:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4a72:	2018      	movs	r0, #24
   d4a74:	f7ff fb0f 	bl	d4096 <_Znwj>
   d4a78:	4604      	mov	r4, r0
   d4a7a:	b1c0      	cbz	r0, d4aae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4a7c:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4a80:	4601      	mov	r1, r0
   d4a82:	4668      	mov	r0, sp
   d4a84:	f7ff ff63 	bl	d494e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4a88:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4a8a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4a8c:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4a8e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4a90:	9202      	str	r2, [sp, #8]
   d4a92:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4a94:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4a96:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d4a9a:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d4a9c:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d4aa0:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4aa4:	9b04      	ldr	r3, [sp, #16]
   d4aa6:	9203      	str	r2, [sp, #12]
   d4aa8:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d4aaa:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4aae:	4b0e      	ldr	r3, [pc, #56]	; (d4ae8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d4ab0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4ab2:	4b0e      	ldr	r3, [pc, #56]	; (d4aec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4ab4:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4ab6:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4ab8:	9804      	ldr	r0, [sp, #16]
   d4aba:	f7ff fe93 	bl	d47e4 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4abe:	4668      	mov	r0, sp
   d4ac0:	f7ff fee8 	bl	d4894 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4ac4:	2200      	movs	r2, #0
   d4ac6:	4629      	mov	r1, r5
   d4ac8:	4809      	ldr	r0, [pc, #36]	; (d4af0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d4aca:	f7ff fdff 	bl	d46cc <application_thread_invoke>
   d4ace:	4630      	mov	r0, r6
   d4ad0:	f7ff fee0 	bl	d4894 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4ad4:	4630      	mov	r0, r6
   d4ad6:	f7ff fae0 	bl	d409a <_ZdlPv>
   d4ada:	4638      	mov	r0, r7
   d4adc:	f7ff fe82 	bl	d47e4 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d4ae0:	b006      	add	sp, #24
   d4ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4ae6:	bf00      	nop
   d4ae8:	000d4981 	.word	0x000d4981
   d4aec:	000d4bdd 	.word	0x000d4bdd
   d4af0:	000d4853 	.word	0x000d4853

000d4af4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4af8:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4afa:	ad07      	add	r5, sp, #28
   d4afc:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4b00:	4606      	mov	r6, r0
   d4b02:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4b04:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4b06:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4b08:	460f      	mov	r7, r1
   d4b0a:	4690      	mov	r8, r2
   d4b0c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4b10:	f8c5 b004 	str.w	fp, [r5, #4]
   d4b14:	f8c5 b008 	str.w	fp, [r5, #8]
   d4b18:	9307      	str	r3, [sp, #28]
   d4b1a:	f7ff fabc 	bl	d4096 <_Znwj>
   d4b1e:	4604      	mov	r4, r0
   d4b20:	b138      	cbz	r0, d4b32 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4b22:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4b26:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4b2a:	f8c0 b004 	str.w	fp, [r0, #4]
   d4b2e:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4b32:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4b34:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d4b36:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4b38:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4b3a:	f7ff faac 	bl	d4096 <_Znwj>
   d4b3e:	b128      	cbz	r0, d4b4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4b40:	2301      	movs	r3, #1
   d4b42:	6043      	str	r3, [r0, #4]
   d4b44:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4b46:	4b23      	ldr	r3, [pc, #140]	; (d4bd4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d4b48:	6003      	str	r3, [r0, #0]
   d4b4a:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4b4c:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d4b4e:	4b22      	ldr	r3, [pc, #136]	; (d4bd8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d4b50:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4b52:	2008      	movs	r0, #8
   d4b54:	f7ff fa9f 	bl	d4096 <_Znwj>
   d4b58:	4604      	mov	r4, r0
   d4b5a:	b128      	cbz	r0, d4b68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4b5c:	9b03      	ldr	r3, [sp, #12]
   d4b5e:	f840 3b04 	str.w	r3, [r0], #4
   d4b62:	a904      	add	r1, sp, #16
   d4b64:	f7ff fecf 	bl	d4906 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4b68:	9500      	str	r5, [sp, #0]
   d4b6a:	fa5f f38a 	uxtb.w	r3, sl
   d4b6e:	464a      	mov	r2, r9
   d4b70:	4641      	mov	r1, r8
   d4b72:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d4b74:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4b76:	f7ff fdc5 	bl	d4704 <spark_send_event>
   d4b7a:	b9b8      	cbnz	r0, d4bac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d4b7c:	9b03      	ldr	r3, [sp, #12]
   d4b7e:	785b      	ldrb	r3, [r3, #1]
   d4b80:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4b84:	b993      	cbnz	r3, d4bac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4b86:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d4b8a:	a905      	add	r1, sp, #20
   d4b8c:	a803      	add	r0, sp, #12
   d4b8e:	9205      	str	r2, [sp, #20]
   d4b90:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4b94:	f7ff ff1a 	bl	d49cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4b98:	9805      	ldr	r0, [sp, #20]
   d4b9a:	f7ff fe23 	bl	d47e4 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4b9e:	a805      	add	r0, sp, #20
   d4ba0:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4ba2:	f7ff feb7 	bl	d4914 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4ba6:	a806      	add	r0, sp, #24
   d4ba8:	f7ff fb84 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4bac:	9b03      	ldr	r3, [sp, #12]
   d4bae:	9305      	str	r3, [sp, #20]
   d4bb0:	a904      	add	r1, sp, #16
   d4bb2:	a806      	add	r0, sp, #24
   d4bb4:	f7ff fea7 	bl	d4906 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d4bb8:	a905      	add	r1, sp, #20
   d4bba:	4630      	mov	r0, r6
   d4bbc:	f7ff fe92 	bl	d48e4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4bc0:	a806      	add	r0, sp, #24
   d4bc2:	f7ff fb77 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4bc6:	a804      	add	r0, sp, #16
   d4bc8:	f7ff fb74 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d4bcc:	4630      	mov	r0, r6
   d4bce:	b00b      	add	sp, #44	; 0x2c
   d4bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4bd4:	000d5fa0 	.word	0x000d5fa0
   d4bd8:	000d4d45 	.word	0x000d4d45

000d4bdc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4bdc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4bde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4be0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4be2:	d006      	beq.n	d4bf2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d4be4:	2a03      	cmp	r2, #3
   d4be6:	d017      	beq.n	d4c18 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d4be8:	2a01      	cmp	r2, #1
   d4bea:	d120      	bne.n	d4c2e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4bec:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4bee:	6003      	str	r3, [r0, #0]
	      break;
   d4bf0:	e01d      	b.n	d4c2e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4bf2:	2018      	movs	r0, #24
   d4bf4:	680e      	ldr	r6, [r1, #0]
   d4bf6:	f7ff fa4e 	bl	d4096 <_Znwj>
   d4bfa:	4605      	mov	r5, r0
   d4bfc:	b150      	cbz	r0, d4c14 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4bfe:	4631      	mov	r1, r6
   d4c00:	f7ff fed5 	bl	d49ae <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4c04:	6930      	ldr	r0, [r6, #16]
   d4c06:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4c0a:	b108      	cbz	r0, d4c10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d4c0c:	f001 f8b2 	bl	d5d74 <strdup>
   d4c10:	6128      	str	r0, [r5, #16]
   d4c12:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4c14:	6025      	str	r5, [r4, #0]
   d4c16:	e00a      	b.n	d4c2e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4c18:	6804      	ldr	r4, [r0, #0]
   d4c1a:	b144      	cbz	r4, d4c2e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4c1c:	6920      	ldr	r0, [r4, #16]
   d4c1e:	f7ff fde1 	bl	d47e4 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4c22:	4620      	mov	r0, r4
   d4c24:	f7ff fe36 	bl	d4894 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4c28:	4620      	mov	r0, r4
   d4c2a:	f7ff fa36 	bl	d409a <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4c2e:	2000      	movs	r0, #0
   d4c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4c32 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4c32:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4c34:	2300      	movs	r3, #0
   d4c36:	6083      	str	r3, [r0, #8]
   d4c38:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4c3a:	4604      	mov	r4, r0
   d4c3c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4c3e:	b12b      	cbz	r3, d4c4c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4c40:	2202      	movs	r2, #2
   d4c42:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4c44:	68eb      	ldr	r3, [r5, #12]
   d4c46:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4c48:	68ab      	ldr	r3, [r5, #8]
   d4c4a:	60a3      	str	r3, [r4, #8]
	}
    }
   d4c4c:	4620      	mov	r0, r4
   d4c4e:	bd38      	pop	{r3, r4, r5, pc}

000d4c50 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4c50:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4c52:	b570      	push	{r4, r5, r6, lr}
   d4c54:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4c56:	d006      	beq.n	d4c66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d4c58:	2a03      	cmp	r2, #3
   d4c5a:	d011      	beq.n	d4c80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d4c5c:	2a01      	cmp	r2, #1
   d4c5e:	d117      	bne.n	d4c90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4c60:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4c62:	6003      	str	r3, [r0, #0]
	      break;
   d4c64:	e014      	b.n	d4c90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4c66:	2014      	movs	r0, #20
   d4c68:	680e      	ldr	r6, [r1, #0]
   d4c6a:	f7ff fa14 	bl	d4096 <_Znwj>
   d4c6e:	4605      	mov	r5, r0
   d4c70:	b120      	cbz	r0, d4c7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4c72:	4631      	mov	r1, r6
   d4c74:	f7ff ffdd 	bl	d4c32 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d4c78:	7c33      	ldrb	r3, [r6, #16]
   d4c7a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4c7c:	6025      	str	r5, [r4, #0]
   d4c7e:	e007      	b.n	d4c90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4c80:	6804      	ldr	r4, [r0, #0]
   d4c82:	b12c      	cbz	r4, d4c90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4c84:	4620      	mov	r0, r4
   d4c86:	f7ff fe05 	bl	d4894 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4c8a:	4620      	mov	r0, r4
   d4c8c:	f7ff fa05 	bl	d409a <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4c90:	2000      	movs	r0, #0
   d4c92:	bd70      	pop	{r4, r5, r6, pc}

000d4c94 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d4c94:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4c96:	2300      	movs	r3, #0
   d4c98:	b087      	sub	sp, #28
   d4c9a:	460c      	mov	r4, r1
   d4c9c:	f3bf 8f5f 	dmb	sy
   d4ca0:	e850 6f00 	ldrex	r6, [r0]
   d4ca4:	e840 3200 	strex	r2, r3, [r0]
   d4ca8:	2a00      	cmp	r2, #0
   d4caa:	d1f9      	bne.n	d4ca0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d4cac:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4cb0:	2e00      	cmp	r6, #0
   d4cb2:	d03e      	beq.n	d4d32 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4cb4:	4618      	mov	r0, r3
   d4cb6:	f7ff fd01 	bl	d46bc <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4cba:	4607      	mov	r7, r0
   d4cbc:	b120      	cbz	r0, d4cc8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4cbe:	4621      	mov	r1, r4
   d4cc0:	4630      	mov	r0, r6
   d4cc2:	f7ff fe64 	bl	d498e <_ZNKSt8functionIFvRKbEEclES1_>
   d4cc6:	e02e      	b.n	d4d26 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4cc8:	4631      	mov	r1, r6
   d4cca:	a801      	add	r0, sp, #4
   d4ccc:	f7ff ffb1 	bl	d4c32 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4cd0:	7823      	ldrb	r3, [r4, #0]
   d4cd2:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4cd6:	2010      	movs	r0, #16
   d4cd8:	f7ff f9dd 	bl	d4096 <_Znwj>
   d4cdc:	4605      	mov	r5, r0
   d4cde:	b1d0      	cbz	r0, d4d16 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4ce0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4ce2:	2014      	movs	r0, #20
   d4ce4:	f7ff f9d7 	bl	d4096 <_Znwj>
   d4ce8:	4604      	mov	r4, r0
   d4cea:	b178      	cbz	r0, d4d0c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4cec:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4cee:	4601      	mov	r1, r0
   d4cf0:	a801      	add	r0, sp, #4
   d4cf2:	f7ff fe2c 	bl	d494e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4cf6:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4cf8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4cfa:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4cfc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4cfe:	9203      	str	r2, [sp, #12]
   d4d00:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4d02:	60e3      	str	r3, [r4, #12]
   d4d04:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4d08:	9204      	str	r2, [sp, #16]
   d4d0a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4d0c:	4b0a      	ldr	r3, [pc, #40]	; (d4d38 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d4d0e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4d10:	4b0a      	ldr	r3, [pc, #40]	; (d4d3c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4d12:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4d14:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4d16:	a801      	add	r0, sp, #4
   d4d18:	f7ff fdbc 	bl	d4894 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4d1c:	2200      	movs	r2, #0
   d4d1e:	4629      	mov	r1, r5
   d4d20:	4807      	ldr	r0, [pc, #28]	; (d4d40 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d4d22:	f7ff fcd3 	bl	d46cc <application_thread_invoke>
   d4d26:	4630      	mov	r0, r6
   d4d28:	f7ff fdb4 	bl	d4894 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4d2c:	4630      	mov	r0, r6
   d4d2e:	f7ff f9b4 	bl	d409a <_ZdlPv>
        }
    }
   d4d32:	b007      	add	sp, #28
   d4d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4d36:	bf00      	nop
   d4d38:	000d49a1 	.word	0x000d49a1
   d4d3c:	000d4c51 	.word	0x000d4c51
   d4d40:	000d4853 	.word	0x000d4853

000d4d44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d4d44:	b530      	push	{r4, r5, lr}
   d4d46:	b085      	sub	sp, #20
   d4d48:	4604      	mov	r4, r0
   d4d4a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d4d4c:	4668      	mov	r0, sp
   d4d4e:	4611      	mov	r1, r2
   d4d50:	f7ff fde0 	bl	d4914 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d4d54:	b17c      	cbz	r4, d4d76 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d4d56:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4d58:	4628      	mov	r0, r5
   d4d5a:	b10d      	cbz	r5, d4d60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d4d5c:	f001 f80a 	bl	d5d74 <strdup>
   d4d60:	9002      	str	r0, [sp, #8]
   d4d62:	a902      	add	r1, sp, #8
   d4d64:	4668      	mov	r0, sp
   d4d66:	f8ad 400c 	strh.w	r4, [sp, #12]
   d4d6a:	f7ff fe2f 	bl	d49cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4d6e:	9802      	ldr	r0, [sp, #8]
   d4d70:	f7ff fd38 	bl	d47e4 <free>
   d4d74:	e01d      	b.n	d4db2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d4d76:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4d78:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4d7c:	f04f 0201 	mov.w	r2, #1
   d4d80:	e8d0 3f4f 	ldrexb	r3, [r0]
   d4d84:	42a3      	cmp	r3, r4
   d4d86:	d103      	bne.n	d4d90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d4d88:	e8c0 2f41 	strexb	r1, r2, [r0]
   d4d8c:	2900      	cmp	r1, #0
   d4d8e:	d1f7      	bne.n	d4d80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d4d90:	d002      	beq.n	d4d98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d4d92:	f88d 3008 	strb.w	r3, [sp, #8]
   d4d96:	e00c      	b.n	d4db2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d4d98:	f110 010c 	adds.w	r1, r0, #12
   d4d9c:	f04f 0301 	mov.w	r3, #1
   d4da0:	bf18      	it	ne
   d4da2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4da4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d4da8:	3004      	adds	r0, #4
   d4daa:	f800 3c03 	strb.w	r3, [r0, #-3]
   d4dae:	f7ff ff71 	bl	d4c94 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d4db2:	a801      	add	r0, sp, #4
   d4db4:	f7ff fa7e 	bl	d42b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d4db8:	b005      	add	sp, #20
   d4dba:	bd30      	pop	{r4, r5, pc}

000d4dbc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4dbc:	2200      	movs	r2, #0
   d4dbe:	4611      	mov	r1, r2
   d4dc0:	6840      	ldr	r0, [r0, #4]
   d4dc2:	f7ff bcef 	b.w	d47a4 <network_listening>

000d4dc6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4dc6:	2200      	movs	r2, #0
   d4dc8:	4611      	mov	r1, r2
   d4dca:	6840      	ldr	r0, [r0, #4]
   d4dcc:	f7ff bcfa 	b.w	d47c4 <network_get_listen_timeout>

000d4dd0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4dd0:	2200      	movs	r2, #0
   d4dd2:	6840      	ldr	r0, [r0, #4]
   d4dd4:	f7ff bcee 	b.w	d47b4 <network_set_listen_timeout>

000d4dd8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4dd8:	2200      	movs	r2, #0
   d4dda:	f081 0101 	eor.w	r1, r1, #1
   d4dde:	6840      	ldr	r0, [r0, #4]
   d4de0:	f7ff bcd8 	b.w	d4794 <network_listen>

000d4de4 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4de4:	2300      	movs	r3, #0
   d4de6:	461a      	mov	r2, r3
   d4de8:	4619      	mov	r1, r3
   d4dea:	6840      	ldr	r0, [r0, #4]
   d4dec:	f7ff bcca 	b.w	d4784 <network_off>

000d4df0 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4df0:	2300      	movs	r3, #0
   d4df2:	461a      	mov	r2, r3
   d4df4:	4619      	mov	r1, r3
   d4df6:	6840      	ldr	r0, [r0, #4]
   d4df8:	f7ff bcbc 	b.w	d4774 <network_on>

000d4dfc <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4dfc:	2200      	movs	r2, #0
   d4dfe:	4611      	mov	r1, r2
   d4e00:	6840      	ldr	r0, [r0, #4]
   d4e02:	f7ff bcaf 	b.w	d4764 <network_ready>

000d4e06 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4e06:	2200      	movs	r2, #0
   d4e08:	4611      	mov	r1, r2
   d4e0a:	6840      	ldr	r0, [r0, #4]
   d4e0c:	f7ff bc9a 	b.w	d4744 <network_connecting>

000d4e10 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4e10:	2200      	movs	r2, #0
   d4e12:	2102      	movs	r1, #2
   d4e14:	6840      	ldr	r0, [r0, #4]
   d4e16:	f7ff bc9d 	b.w	d4754 <network_disconnect>

000d4e1a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4e1a:	2300      	movs	r3, #0
   d4e1c:	461a      	mov	r2, r3
   d4e1e:	6840      	ldr	r0, [r0, #4]
   d4e20:	f7ff bc88 	b.w	d4734 <network_connect>

000d4e24 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4e24:	4b02      	ldr	r3, [pc, #8]	; (d4e30 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4e26:	2203      	movs	r2, #3
   d4e28:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4e2a:	4a02      	ldr	r2, [pc, #8]	; (d4e34 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4e2c:	601a      	str	r2, [r3, #0]
   d4e2e:	4770      	bx	lr
   d4e30:	2003e3d0 	.word	0x2003e3d0
   d4e34:	000d5fbc 	.word	0x000d5fbc

000d4e38 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d4e38:	4770      	bx	lr

000d4e3a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4e3c:	4606      	mov	r6, r0
   d4e3e:	4615      	mov	r5, r2
   d4e40:	460c      	mov	r4, r1
   d4e42:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4e44:	42bc      	cmp	r4, r7
   d4e46:	d006      	beq.n	d4e56 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4e48:	6833      	ldr	r3, [r6, #0]
   d4e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4e4e:	689b      	ldr	r3, [r3, #8]
   d4e50:	4630      	mov	r0, r6
   d4e52:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4e54:	e7f6      	b.n	d4e44 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4e56:	4628      	mov	r0, r5
   d4e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4e5a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4e5a:	2200      	movs	r2, #0
   d4e5c:	7c00      	ldrb	r0, [r0, #16]
   d4e5e:	f7ff bb45 	b.w	d44ec <HAL_I2C_Write_Data>

000d4e62 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4e62:	2100      	movs	r1, #0
   d4e64:	7c00      	ldrb	r0, [r0, #16]
   d4e66:	f7ff bb49 	b.w	d44fc <HAL_I2C_Available_Data>

000d4e6a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4e6a:	2100      	movs	r1, #0
   d4e6c:	7c00      	ldrb	r0, [r0, #16]
   d4e6e:	f7ff bb4d 	b.w	d450c <HAL_I2C_Read_Data>

000d4e72 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4e72:	2100      	movs	r1, #0
   d4e74:	7c00      	ldrb	r0, [r0, #16]
   d4e76:	f7ff bb51 	b.w	d451c <HAL_I2C_Peek_Data>

000d4e7a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4e7a:	2100      	movs	r1, #0
   d4e7c:	7c00      	ldrb	r0, [r0, #16]
   d4e7e:	f7ff bb55 	b.w	d452c <HAL_I2C_Flush_Data>

000d4e82 <_ZN7TwoWireD0Ev>:
   d4e82:	b510      	push	{r4, lr}
   d4e84:	4604      	mov	r4, r0
   d4e86:	f7ff f908 	bl	d409a <_ZdlPv>
   d4e8a:	4620      	mov	r0, r4
   d4e8c:	bd10      	pop	{r4, pc}
	...

000d4e90 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4e90:	b510      	push	{r4, lr}
   d4e92:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4e94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4e98:	4608      	mov	r0, r1
   d4e9a:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4e9c:	2100      	movs	r1, #0
   d4e9e:	4b04      	ldr	r3, [pc, #16]	; (d4eb0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d4ea0:	7420      	strb	r0, [r4, #16]
   d4ea2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4ea4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d4ea6:	f7ff fb51 	bl	d454c <HAL_I2C_Init>

}
   d4eaa:	4620      	mov	r0, r4
   d4eac:	bd10      	pop	{r4, pc}
   d4eae:	bf00      	nop
   d4eb0:	000d5ff0 	.word	0x000d5ff0

000d4eb4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d4eb4:	2100      	movs	r1, #0
   d4eb6:	7c00      	ldrb	r0, [r0, #16]
   d4eb8:	f7ff bb40 	b.w	d453c <HAL_I2C_Is_Enabled>

000d4ebc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4ebc:	4770      	bx	lr

000d4ebe <_ZN9IPAddressD0Ev>:
   d4ebe:	b510      	push	{r4, lr}
   d4ec0:	4604      	mov	r4, r0
   d4ec2:	f7ff f8ea 	bl	d409a <_ZdlPv>
   d4ec6:	4620      	mov	r0, r4
   d4ec8:	bd10      	pop	{r4, pc}

000d4eca <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4eca:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d4ecc:	7d03      	ldrb	r3, [r0, #20]
   d4ece:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4ed0:	b08d      	sub	sp, #52	; 0x34
   d4ed2:	460e      	mov	r6, r1
   d4ed4:	f100 0704 	add.w	r7, r0, #4
   d4ed8:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d4edc:	d002      	beq.n	d4ee4 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4ede:	f100 0508 	add.w	r5, r0, #8
   d4ee2:	e018      	b.n	d4f16 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4ee4:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4ee6:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4ee8:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4eec:	232f      	movs	r3, #47	; 0x2f
   d4eee:	462a      	mov	r2, r5
   d4ef0:	200a      	movs	r0, #10
   d4ef2:	f7ff fb33 	bl	d455c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4ef6:	4628      	mov	r0, r5
   d4ef8:	f000 ff57 	bl	d5daa <strlen>
   d4efc:	6833      	ldr	r3, [r6, #0]
   d4efe:	4602      	mov	r2, r0
   d4f00:	68db      	ldr	r3, [r3, #12]
   d4f02:	4629      	mov	r1, r5
   d4f04:	4630      	mov	r0, r6
   d4f06:	4798      	blx	r3
   d4f08:	e00f      	b.n	d4f2a <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4f0a:	b124      	cbz	r4, d4f16 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4f0c:	212e      	movs	r1, #46	; 0x2e
   d4f0e:	4630      	mov	r0, r6
   d4f10:	f000 f992 	bl	d5238 <_ZN5Print5printEc>
   d4f14:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4f16:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4f1a:	220a      	movs	r2, #10
   d4f1c:	4630      	mov	r0, r6
   d4f1e:	f000 f9d1 	bl	d52c4 <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4f22:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4f24:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4f26:	d1f0      	bne.n	d4f0a <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4f28:	4620      	mov	r0, r4
    }
    return n;
}
   d4f2a:	b00d      	add	sp, #52	; 0x34
   d4f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4f30 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"

#include <arpa/inet.h>

IPAddress::IPAddress()
   d4f30:	b510      	push	{r4, lr}
   d4f32:	4b05      	ldr	r3, [pc, #20]	; (d4f48 <_ZN9IPAddressC1Ev+0x18>)
   d4f34:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4f36:	2211      	movs	r2, #17
   d4f38:	f840 3b04 	str.w	r3, [r0], #4
   d4f3c:	2100      	movs	r1, #0
   d4f3e:	f000 fefe 	bl	d5d3e <memset>
{
    clear();
}
   d4f42:	4620      	mov	r0, r4
   d4f44:	bd10      	pop	{r4, pc}
   d4f46:	bf00      	nop
   d4f48:	000d6018 	.word	0x000d6018

000d4f4c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4f4c:	4603      	mov	r3, r0
   d4f4e:	4a07      	ldr	r2, [pc, #28]	; (d4f6c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4f50:	b510      	push	{r4, lr}
   d4f52:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4f56:	f101 0210 	add.w	r2, r1, #16
   d4f5a:	f851 4b04 	ldr.w	r4, [r1], #4
   d4f5e:	f843 4b04 	str.w	r4, [r3], #4
   d4f62:	4291      	cmp	r1, r2
   d4f64:	d1f9      	bne.n	d4f5a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4f66:	780a      	ldrb	r2, [r1, #0]
   d4f68:	701a      	strb	r2, [r3, #0]
}
   d4f6a:	bd10      	pop	{r4, pc}
   d4f6c:	000d6018 	.word	0x000d6018

000d4f70 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4f70:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4f72:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4f76:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4f7a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4f7e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4f82:	2304      	movs	r3, #4
   d4f84:	6041      	str	r1, [r0, #4]
   d4f86:	7503      	strb	r3, [r0, #20]
   d4f88:	bd10      	pop	{r4, pc}

000d4f8a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4f8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4f8c:	780d      	ldrb	r5, [r1, #0]
   d4f8e:	788b      	ldrb	r3, [r1, #2]
   d4f90:	784a      	ldrb	r2, [r1, #1]
   d4f92:	78c9      	ldrb	r1, [r1, #3]
   d4f94:	9100      	str	r1, [sp, #0]
   d4f96:	4629      	mov	r1, r5
   d4f98:	f7ff ffea 	bl	d4f70 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4f9c:	b003      	add	sp, #12
   d4f9e:	bd30      	pop	{r4, r5, pc}

000d4fa0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4fa0:	4b01      	ldr	r3, [pc, #4]	; (d4fa8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4fa2:	4a02      	ldr	r2, [pc, #8]	; (d4fac <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4fa4:	601a      	str	r2, [r3, #0]
   d4fa6:	4770      	bx	lr
   d4fa8:	2003e3d8 	.word	0x2003e3d8
   d4fac:	000d60dc 	.word	0x000d60dc

000d4fb0 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4fb0:	2200      	movs	r2, #0
   d4fb2:	4611      	mov	r1, r2
   d4fb4:	6840      	ldr	r0, [r0, #4]
   d4fb6:	f7ff bbf5 	b.w	d47a4 <network_listening>

000d4fba <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4fba:	2200      	movs	r2, #0
   d4fbc:	4611      	mov	r1, r2
   d4fbe:	6840      	ldr	r0, [r0, #4]
   d4fc0:	f7ff bc00 	b.w	d47c4 <network_get_listen_timeout>

000d4fc4 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4fc4:	2200      	movs	r2, #0
   d4fc6:	6840      	ldr	r0, [r0, #4]
   d4fc8:	f7ff bbf4 	b.w	d47b4 <network_set_listen_timeout>

000d4fcc <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4fcc:	2200      	movs	r2, #0
   d4fce:	f081 0101 	eor.w	r1, r1, #1
   d4fd2:	6840      	ldr	r0, [r0, #4]
   d4fd4:	f7ff bbde 	b.w	d4794 <network_listen>

000d4fd8 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4fd8:	2300      	movs	r3, #0
   d4fda:	461a      	mov	r2, r3
   d4fdc:	4619      	mov	r1, r3
   d4fde:	6840      	ldr	r0, [r0, #4]
   d4fe0:	f7ff bbd0 	b.w	d4784 <network_off>

000d4fe4 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4fe4:	2300      	movs	r3, #0
   d4fe6:	461a      	mov	r2, r3
   d4fe8:	4619      	mov	r1, r3
   d4fea:	6840      	ldr	r0, [r0, #4]
   d4fec:	f7ff bbc2 	b.w	d4774 <network_on>

000d4ff0 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4ff0:	2200      	movs	r2, #0
   d4ff2:	4611      	mov	r1, r2
   d4ff4:	6840      	ldr	r0, [r0, #4]
   d4ff6:	f7ff bbb5 	b.w	d4764 <network_ready>

000d4ffa <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4ffa:	2200      	movs	r2, #0
   d4ffc:	4611      	mov	r1, r2
   d4ffe:	6840      	ldr	r0, [r0, #4]
   d5000:	f7ff bba0 	b.w	d4744 <network_connecting>

000d5004 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5004:	2200      	movs	r2, #0
   d5006:	2102      	movs	r1, #2
   d5008:	6840      	ldr	r0, [r0, #4]
   d500a:	f7ff bba3 	b.w	d4754 <network_disconnect>

000d500e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d500e:	2300      	movs	r3, #0
   d5010:	461a      	mov	r2, r3
   d5012:	6840      	ldr	r0, [r0, #4]
   d5014:	f7ff bb8e 	b.w	d4734 <network_connect>

000d5018 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5018:	b110      	cbz	r0, d5020 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d501a:	6803      	ldr	r3, [r0, #0]
   d501c:	685b      	ldr	r3, [r3, #4]
   d501e:	4718      	bx	r3
   d5020:	4770      	bx	lr

000d5022 <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d5022:	b538      	push	{r3, r4, r5, lr}
   d5024:	4604      	mov	r4, r0
   d5026:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d5028:	b1d0      	cbz	r0, d5060 <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d502a:	f7ff f9ff 	bl	d442c <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d502e:	b9b8      	cbnz	r0, d5060 <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d5030:	7c23      	ldrb	r3, [r4, #16]
   d5032:	b91b      	cbnz	r3, d503c <_ZN6Thread7disposeEv+0x1a>
   d5034:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d5036:	b108      	cbz	r0, d503c <_ZN6Thread7disposeEv+0x1a>
   d5038:	f7ff fa00 	bl	d443c <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d503c:	6865      	ldr	r5, [r4, #4]
   d503e:	b155      	cbz	r5, d5056 <_ZN6Thread7disposeEv+0x34>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5040:	68ab      	ldr	r3, [r5, #8]
   d5042:	b11b      	cbz	r3, d504c <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5044:	2203      	movs	r2, #3
   d5046:	4629      	mov	r1, r5
   d5048:	4628      	mov	r0, r5
   d504a:	4798      	blx	r3
            delete wrapper;
   d504c:	4628      	mov	r0, r5
   d504e:	f7ff f824 	bl	d409a <_ZdlPv>
            wrapper = NULL;
   d5052:	2300      	movs	r3, #0
   d5054:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d5056:	6820      	ldr	r0, [r4, #0]
   d5058:	f7ff f9f8 	bl	d444c <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d505c:	2300      	movs	r3, #0
   d505e:	6023      	str	r3, [r4, #0]
   d5060:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5064 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5064:	b538      	push	{r3, r4, r5, lr}
   d5066:	4b0b      	ldr	r3, [pc, #44]	; (d5094 <_ZN5spark9MeshClassD1Ev+0x30>)
   d5068:	6003      	str	r3, [r0, #0]
   d506a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d506c:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5070:	b108      	cbz	r0, d5076 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5072:	f7ff f814 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5076:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d507a:	b12d      	cbz	r5, d5088 <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d507c:	4628      	mov	r0, r5
   d507e:	f7ff ffd0 	bl	d5022 <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5082:	4628      	mov	r0, r5
   d5084:	f7ff f809 	bl	d409a <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5088:	68a0      	ldr	r0, [r4, #8]
   d508a:	b108      	cbz	r0, d5090 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d508c:	f7ff ffc4 	bl	d5018 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d5090:	4620      	mov	r0, r4
   d5092:	bd38      	pop	{r3, r4, r5, pc}
   d5094:	000d6110 	.word	0x000d6110

000d5098 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5098:	b538      	push	{r3, r4, r5, lr}
   d509a:	4c0d      	ldr	r4, [pc, #52]	; (d50d0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d509c:	4b0d      	ldr	r3, [pc, #52]	; (d50d4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d509e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d50a0:	2500      	movs	r5, #0
   d50a2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d50a4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d50a8:	6063      	str	r3, [r4, #4]
   d50aa:	60a5      	str	r5, [r4, #8]
   d50ac:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d50b0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d50b4:	f7ff f9da 	bl	d446c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d50b8:	4b07      	ldr	r3, [pc, #28]	; (d50d8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d50ba:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d50be:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d50c0:	4620      	mov	r0, r4
   d50c2:	4a06      	ldr	r2, [pc, #24]	; (d50dc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d50c4:	4906      	ldr	r1, [pc, #24]	; (d50e0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d50c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d50ca:	f000 bccb 	b.w	d5a64 <__aeabi_atexit>
   d50ce:	bf00      	nop
   d50d0:	2003e3dc 	.word	0x2003e3dc
   d50d4:	000d6144 	.word	0x000d6144
   d50d8:	000d6110 	.word	0x000d6110
   d50dc:	2003e370 	.word	0x2003e370
   d50e0:	000d5065 	.word	0x000d5065

000d50e4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d50e4:	2300      	movs	r3, #0
   d50e6:	461a      	mov	r2, r3
   d50e8:	6840      	ldr	r0, [r0, #4]
   d50ea:	f7ff bb23 	b.w	d4734 <network_connect>

000d50ee <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d50ee:	2200      	movs	r2, #0
   d50f0:	2102      	movs	r1, #2
   d50f2:	6840      	ldr	r0, [r0, #4]
   d50f4:	f7ff bb2e 	b.w	d4754 <network_disconnect>

000d50f8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d50f8:	2200      	movs	r2, #0
   d50fa:	4611      	mov	r1, r2
   d50fc:	6840      	ldr	r0, [r0, #4]
   d50fe:	f7ff bb21 	b.w	d4744 <network_connecting>

000d5102 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5102:	2200      	movs	r2, #0
   d5104:	4611      	mov	r1, r2
   d5106:	6840      	ldr	r0, [r0, #4]
   d5108:	f7ff bb2c 	b.w	d4764 <network_ready>

000d510c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d510c:	2300      	movs	r3, #0
   d510e:	461a      	mov	r2, r3
   d5110:	4619      	mov	r1, r3
   d5112:	6840      	ldr	r0, [r0, #4]
   d5114:	f7ff bb2e 	b.w	d4774 <network_on>

000d5118 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5118:	2300      	movs	r3, #0
   d511a:	461a      	mov	r2, r3
   d511c:	4619      	mov	r1, r3
   d511e:	6840      	ldr	r0, [r0, #4]
   d5120:	f7ff bb30 	b.w	d4784 <network_off>

000d5124 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5124:	2200      	movs	r2, #0
   d5126:	f081 0101 	eor.w	r1, r1, #1
   d512a:	6840      	ldr	r0, [r0, #4]
   d512c:	f7ff bb32 	b.w	d4794 <network_listen>

000d5130 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5130:	2200      	movs	r2, #0
   d5132:	6840      	ldr	r0, [r0, #4]
   d5134:	f7ff bb3e 	b.w	d47b4 <network_set_listen_timeout>

000d5138 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5138:	2200      	movs	r2, #0
   d513a:	4611      	mov	r1, r2
   d513c:	6840      	ldr	r0, [r0, #4]
   d513e:	f7ff bb41 	b.w	d47c4 <network_get_listen_timeout>

000d5142 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5142:	2200      	movs	r2, #0
   d5144:	4611      	mov	r1, r2
   d5146:	6840      	ldr	r0, [r0, #4]
   d5148:	f7ff bb2c 	b.w	d47a4 <network_listening>

000d514c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d514c:	b570      	push	{r4, r5, r6, lr}
   d514e:	b08c      	sub	sp, #48	; 0x30
   d5150:	4614      	mov	r4, r2
   d5152:	4606      	mov	r6, r0
    IPAddress addr;
   d5154:	f7ff feec 	bl	d4f30 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5158:	ab0c      	add	r3, sp, #48	; 0x30
   d515a:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d515c:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d515e:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d5162:	4620      	mov	r0, r4
   d5164:	f7ff fa0a 	bl	d457c <netdb_getaddrinfo>
    if (!r && ai) {
   d5168:	4601      	mov	r1, r0
   d516a:	bb58      	cbnz	r0, d51c4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d516c:	9b00      	ldr	r3, [sp, #0]
   d516e:	b34b      	cbz	r3, d51c4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d5170:	685a      	ldr	r2, [r3, #4]
   d5172:	2a02      	cmp	r2, #2
   d5174:	d00e      	beq.n	d5194 <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d5176:	2a0a      	cmp	r2, #10
   d5178:	d124      	bne.n	d51c4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d517a:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d517c:	2211      	movs	r2, #17
   d517e:	a801      	add	r0, sp, #4
   d5180:	f000 fddd 	bl	d5d3e <memset>
                a.v = 6;
   d5184:	2306      	movs	r3, #6
   d5186:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d518a:	ad01      	add	r5, sp, #4
   d518c:	f104 0308 	add.w	r3, r4, #8
   d5190:	3418      	adds	r4, #24
   d5192:	e005      	b.n	d51a0 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5194:	6959      	ldr	r1, [r3, #20]
   d5196:	4630      	mov	r0, r6
   d5198:	3104      	adds	r1, #4
   d519a:	f7ff fef6 	bl	d4f8a <_ZN9IPAddressaSEPKh>
                break;
   d519e:	e011      	b.n	d51c4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d51a0:	6818      	ldr	r0, [r3, #0]
   d51a2:	6859      	ldr	r1, [r3, #4]
   d51a4:	462a      	mov	r2, r5
   d51a6:	c203      	stmia	r2!, {r0, r1}
   d51a8:	3308      	adds	r3, #8
   d51aa:	42a3      	cmp	r3, r4
   d51ac:	4615      	mov	r5, r2
   d51ae:	d1f7      	bne.n	d51a0 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d51b0:	a901      	add	r1, sp, #4
   d51b2:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d51b4:	ad07      	add	r5, sp, #28
   d51b6:	f7ff fec9 	bl	d4f4c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d51ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d51bc:	1d34      	adds	r4, r6, #4
   d51be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d51c0:	682b      	ldr	r3, [r5, #0]
   d51c2:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d51c4:	9800      	ldr	r0, [sp, #0]
   d51c6:	f7ff f9d1 	bl	d456c <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d51ca:	4630      	mov	r0, r6
   d51cc:	b00c      	add	sp, #48	; 0x30
   d51ce:	bd70      	pop	{r4, r5, r6, pc}

000d51d0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d51d0:	4b02      	ldr	r3, [pc, #8]	; (d51dc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d51d2:	4a03      	ldr	r2, [pc, #12]	; (d51e0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d51d4:	601a      	str	r2, [r3, #0]
   d51d6:	2200      	movs	r2, #0
   d51d8:	605a      	str	r2, [r3, #4]
   d51da:	4770      	bx	lr
   d51dc:	2003e5ac 	.word	0x2003e5ac
   d51e0:	000d6144 	.word	0x000d6144

000d51e4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d51e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d51e6:	4606      	mov	r6, r0
   d51e8:	460d      	mov	r5, r1
   d51ea:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d51ec:	2400      	movs	r4, #0
  while (size--) {
   d51ee:	42bd      	cmp	r5, r7
   d51f0:	d00c      	beq.n	d520c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d51f2:	6833      	ldr	r3, [r6, #0]
   d51f4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d51f8:	689b      	ldr	r3, [r3, #8]
   d51fa:	4630      	mov	r0, r6
   d51fc:	4798      	blx	r3
     if (chunk>=0)
   d51fe:	2800      	cmp	r0, #0
   d5200:	db01      	blt.n	d5206 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5202:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5204:	e7f3      	b.n	d51ee <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5206:	2c00      	cmp	r4, #0
   d5208:	bf08      	it	eq
   d520a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d520c:	4620      	mov	r0, r4
   d520e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5210 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5210:	b570      	push	{r4, r5, r6, lr}
   d5212:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5214:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5216:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5218:	b149      	cbz	r1, d522e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d521a:	f000 fdc6 	bl	d5daa <strlen>
   d521e:	682b      	ldr	r3, [r5, #0]
   d5220:	4602      	mov	r2, r0
   d5222:	4621      	mov	r1, r4
   d5224:	4628      	mov	r0, r5
   d5226:	68db      	ldr	r3, [r3, #12]
    }
   d5228:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d522c:	4718      	bx	r3
    }
   d522e:	bd70      	pop	{r4, r5, r6, pc}

000d5230 <_ZN5Print5printEPKc>:
   d5230:	b508      	push	{r3, lr}
   d5232:	f7ff ffed 	bl	d5210 <_ZN5Print5writeEPKc>
   d5236:	bd08      	pop	{r3, pc}

000d5238 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5238:	6803      	ldr	r3, [r0, #0]
   d523a:	689b      	ldr	r3, [r3, #8]
   d523c:	4718      	bx	r3

000d523e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d523e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5240:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5242:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5244:	f7ff fff8 	bl	d5238 <_ZN5Print5printEc>
  n += print('\n');
   d5248:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d524a:	4604      	mov	r4, r0
  n += print('\n');
   d524c:	4628      	mov	r0, r5
   d524e:	f7ff fff3 	bl	d5238 <_ZN5Print5printEc>
  return n;
}
   d5252:	4420      	add	r0, r4
   d5254:	bd38      	pop	{r3, r4, r5, pc}

000d5256 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5256:	b538      	push	{r3, r4, r5, lr}
   d5258:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d525a:	f7ff ffd9 	bl	d5210 <_ZN5Print5writeEPKc>
   d525e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5260:	4628      	mov	r0, r5
   d5262:	f7ff ffec 	bl	d523e <_ZN5Print7printlnEv>
  return n;
}
   d5266:	4420      	add	r0, r4
   d5268:	bd38      	pop	{r3, r4, r5, pc}

000d526a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d526a:	b530      	push	{r4, r5, lr}
   d526c:	b08b      	sub	sp, #44	; 0x2c
   d526e:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5270:	2100      	movs	r1, #0
   d5272:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5276:	2a01      	cmp	r2, #1
   d5278:	bf98      	it	ls
   d527a:	220a      	movls	r2, #10
   d527c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5280:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5284:	fb05 3312 	mls	r3, r5, r2, r3
   d5288:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d528c:	2b09      	cmp	r3, #9
   d528e:	bf94      	ite	ls
   d5290:	3330      	addls	r3, #48	; 0x30
   d5292:	3337      	addhi	r3, #55	; 0x37
   d5294:	b2db      	uxtb	r3, r3
   d5296:	4621      	mov	r1, r4
   d5298:	f804 3901 	strb.w	r3, [r4], #-1
   d529c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d529e:	2d00      	cmp	r5, #0
   d52a0:	d1ee      	bne.n	d5280 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d52a2:	f7ff ffb5 	bl	d5210 <_ZN5Print5writeEPKc>
}
   d52a6:	b00b      	add	sp, #44	; 0x2c
   d52a8:	bd30      	pop	{r4, r5, pc}

000d52aa <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d52aa:	b410      	push	{r4}
  if (base == 0) return write(n);
   d52ac:	b92a      	cbnz	r2, d52ba <_ZN5Print5printEmi+0x10>
   d52ae:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d52b0:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d52b4:	689b      	ldr	r3, [r3, #8]
   d52b6:	b2c9      	uxtb	r1, r1
   d52b8:	4718      	bx	r3
  else return printNumber(n, base);
   d52ba:	b2d2      	uxtb	r2, r2
}
   d52bc:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d52c0:	f7ff bfd3 	b.w	d526a <_ZN5Print11printNumberEmh>

000d52c4 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d52c4:	f7ff bff1 	b.w	d52aa <_ZN5Print5printEmi>

000d52c8 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d52c8:	b40c      	push	{r2, r3}
   d52ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d52ce:	b087      	sub	sp, #28
   d52d0:	af00      	add	r7, sp, #0
   d52d2:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d52d6:	4605      	mov	r5, r0
   d52d8:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d52dc:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d52de:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d52e0:	4623      	mov	r3, r4
   d52e2:	464a      	mov	r2, r9
   d52e4:	2114      	movs	r1, #20
   d52e6:	1d38      	adds	r0, r7, #4
   d52e8:	f7ff fa8c 	bl	d4804 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d52ec:	2813      	cmp	r0, #19
   d52ee:	d805      	bhi.n	d52fc <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d52f0:	1d39      	adds	r1, r7, #4
   d52f2:	4628      	mov	r0, r5
   d52f4:	f7ff ff8c 	bl	d5210 <_ZN5Print5writeEPKc>
   d52f8:	4604      	mov	r4, r0
   d52fa:	e013      	b.n	d5324 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d52fc:	f100 0308 	add.w	r3, r0, #8
   d5300:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d5304:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5306:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d530a:	1c41      	adds	r1, r0, #1
   d530c:	4623      	mov	r3, r4
   d530e:	464a      	mov	r2, r9
   d5310:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d5312:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d5314:	f7ff fa76 	bl	d4804 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5318:	4669      	mov	r1, sp
   d531a:	4628      	mov	r0, r5
   d531c:	f7ff ff78 	bl	d5210 <_ZN5Print5writeEPKc>
   d5320:	4604      	mov	r4, r0
   d5322:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d5324:	b11e      	cbz	r6, d532e <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d5326:	4628      	mov	r0, r5
   d5328:	f7ff ff89 	bl	d523e <_ZN5Print7printlnEv>
   d532c:	4404      	add	r4, r0
    return n;
}
   d532e:	4620      	mov	r0, r4
   d5330:	371c      	adds	r7, #28
   d5332:	46bd      	mov	sp, r7
   d5334:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5338:	b002      	add	sp, #8
   d533a:	4770      	bx	lr

000d533c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d533c:	b510      	push	{r4, lr}
   d533e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5340:	f7ff faa8 	bl	d4894 <_ZNSt14_Function_baseD1Ev>
   d5344:	4620      	mov	r0, r4
   d5346:	bd10      	pop	{r4, pc}

000d5348 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5348:	4803      	ldr	r0, [pc, #12]	; (d5358 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d534a:	4a04      	ldr	r2, [pc, #16]	; (d535c <_GLOBAL__sub_I_RGB+0x14>)
   d534c:	4904      	ldr	r1, [pc, #16]	; (d5360 <_GLOBAL__sub_I_RGB+0x18>)
   d534e:	2300      	movs	r3, #0
   d5350:	6083      	str	r3, [r0, #8]
   d5352:	f000 bb87 	b.w	d5a64 <__aeabi_atexit>
   d5356:	bf00      	nop
   d5358:	2003e5b4 	.word	0x2003e5b4
   d535c:	2003e370 	.word	0x2003e370
   d5360:	000d533d 	.word	0x000d533d

000d5364 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5364:	4770      	bx	lr

000d5366 <_ZN8SPIClassD0Ev>:
   d5366:	b510      	push	{r4, lr}
   d5368:	4604      	mov	r4, r0
   d536a:	f7fe fe96 	bl	d409a <_ZdlPv>
   d536e:	4620      	mov	r0, r4
   d5370:	bd10      	pop	{r4, pc}
	...

000d5374 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5374:	b570      	push	{r4, r5, r6, lr}
   d5376:	4b08      	ldr	r3, [pc, #32]	; (d5398 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5378:	6003      	str	r3, [r0, #0]
   d537a:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d537c:	2500      	movs	r5, #0
   d537e:	460e      	mov	r6, r1
   d5380:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5384:	f7ff f86a 	bl	d445c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5388:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d538a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d538c:	f7ff f8fe 	bl	d458c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5390:	60a5      	str	r5, [r4, #8]
}
   d5392:	4620      	mov	r0, r4
   d5394:	bd70      	pop	{r4, r5, r6, pc}
   d5396:	bf00      	nop
   d5398:	000d6178 	.word	0x000d6178

000d539c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d539c:	7900      	ldrb	r0, [r0, #4]
   d539e:	f7ff b8fd 	b.w	d459c <HAL_SPI_Is_Enabled>

000d53a2 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d53a2:	b510      	push	{r4, lr}
   d53a4:	4604      	mov	r4, r0
{
	free(buffer);
   d53a6:	6800      	ldr	r0, [r0, #0]
   d53a8:	f7ff fa1c 	bl	d47e4 <free>
}
   d53ac:	4620      	mov	r0, r4
   d53ae:	bd10      	pop	{r4, pc}

000d53b0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d53b0:	b510      	push	{r4, lr}
   d53b2:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d53b4:	6800      	ldr	r0, [r0, #0]
   d53b6:	b108      	cbz	r0, d53bc <_ZN6String10invalidateEv+0xc>
   d53b8:	f7ff fa14 	bl	d47e4 <free>
	buffer = NULL;
   d53bc:	2300      	movs	r3, #0
   d53be:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d53c0:	60a3      	str	r3, [r4, #8]
   d53c2:	6063      	str	r3, [r4, #4]
   d53c4:	bd10      	pop	{r4, pc}

000d53c6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d53c6:	b538      	push	{r3, r4, r5, lr}
   d53c8:	4604      	mov	r4, r0
   d53ca:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d53cc:	6800      	ldr	r0, [r0, #0]
   d53ce:	3101      	adds	r1, #1
   d53d0:	f7ff fa10 	bl	d47f4 <realloc>
	if (newbuffer) {
   d53d4:	b110      	cbz	r0, d53dc <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d53d6:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d53da:	2001      	movs	r0, #1
	}
	return 0;
}
   d53dc:	bd38      	pop	{r3, r4, r5, pc}

000d53de <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d53de:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d53e0:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d53e2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d53e4:	b113      	cbz	r3, d53ec <_ZN6String7reserveEj+0xe>
   d53e6:	6843      	ldr	r3, [r0, #4]
   d53e8:	428b      	cmp	r3, r1
   d53ea:	d207      	bcs.n	d53fc <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d53ec:	4620      	mov	r0, r4
   d53ee:	f7ff ffea 	bl	d53c6 <_ZN6String12changeBufferEj>
   d53f2:	b120      	cbz	r0, d53fe <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d53f4:	68a3      	ldr	r3, [r4, #8]
   d53f6:	b90b      	cbnz	r3, d53fc <_ZN6String7reserveEj+0x1e>
   d53f8:	6822      	ldr	r2, [r4, #0]
   d53fa:	7013      	strb	r3, [r2, #0]
   d53fc:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d53fe:	bd10      	pop	{r4, pc}

000d5400 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5400:	b570      	push	{r4, r5, r6, lr}
   d5402:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5404:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5406:	4604      	mov	r4, r0
   d5408:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d540a:	f7ff ffe8 	bl	d53de <_ZN6String7reserveEj>
   d540e:	b918      	cbnz	r0, d5418 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5410:	4620      	mov	r0, r4
   d5412:	f7ff ffcd 	bl	d53b0 <_ZN6String10invalidateEv>
		return *this;
   d5416:	e009      	b.n	d542c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5418:	462a      	mov	r2, r5
   d541a:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d541c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d541e:	6820      	ldr	r0, [r4, #0]
   d5420:	f000 fc82 	bl	d5d28 <memcpy>
	buffer[len] = 0;
   d5424:	6822      	ldr	r2, [r4, #0]
   d5426:	68a3      	ldr	r3, [r4, #8]
   d5428:	2100      	movs	r1, #0
   d542a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d542c:	4620      	mov	r0, r4
   d542e:	bd70      	pop	{r4, r5, r6, pc}

000d5430 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5430:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5432:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5434:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5436:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5438:	6043      	str	r3, [r0, #4]
	len = 0;
   d543a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d543c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d543e:	460d      	mov	r5, r1
   d5440:	b139      	cbz	r1, d5452 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5442:	4608      	mov	r0, r1
   d5444:	f000 fcb1 	bl	d5daa <strlen>
   d5448:	4629      	mov	r1, r5
   d544a:	4602      	mov	r2, r0
   d544c:	4620      	mov	r0, r4
   d544e:	f7ff ffd7 	bl	d5400 <_ZN6String4copyEPKcj>
}
   d5452:	4620      	mov	r0, r4
   d5454:	bd38      	pop	{r3, r4, r5, pc}

000d5456 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d5456:	b538      	push	{r3, r4, r5, lr}
   d5458:	4605      	mov	r5, r0
	if (buffer) {
   d545a:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d545c:	460c      	mov	r4, r1
	if (buffer) {
   d545e:	b160      	cbz	r0, d547a <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d5460:	686a      	ldr	r2, [r5, #4]
   d5462:	688b      	ldr	r3, [r1, #8]
   d5464:	429a      	cmp	r2, r3
   d5466:	d306      	bcc.n	d5476 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d5468:	6809      	ldr	r1, [r1, #0]
   d546a:	f000 fc7a 	bl	d5d62 <strcpy>
			len = rhs.len;
   d546e:	68a3      	ldr	r3, [r4, #8]
   d5470:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d5472:	2300      	movs	r3, #0
   d5474:	e00a      	b.n	d548c <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d5476:	f7ff f9b5 	bl	d47e4 <free>
		}
	}
	buffer = rhs.buffer;
   d547a:	6823      	ldr	r3, [r4, #0]
   d547c:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d547e:	6863      	ldr	r3, [r4, #4]
   d5480:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d5482:	68a3      	ldr	r3, [r4, #8]
   d5484:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d5486:	2300      	movs	r3, #0
   d5488:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d548a:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d548c:	60a3      	str	r3, [r4, #8]
   d548e:	bd38      	pop	{r3, r4, r5, pc}

000d5490 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5490:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d5492:	b510      	push	{r4, lr}
   d5494:	460b      	mov	r3, r1
   d5496:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5498:	d007      	beq.n	d54aa <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d549a:	6809      	ldr	r1, [r1, #0]
   d549c:	b119      	cbz	r1, d54a6 <_ZN6StringaSERKS_+0x16>
   d549e:	689a      	ldr	r2, [r3, #8]
   d54a0:	f7ff ffae 	bl	d5400 <_ZN6String4copyEPKcj>
   d54a4:	e001      	b.n	d54aa <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d54a6:	f7ff ff83 	bl	d53b0 <_ZN6String10invalidateEv>

	return *this;
}
   d54aa:	4620      	mov	r0, r4
   d54ac:	bd10      	pop	{r4, pc}

000d54ae <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d54ae:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d54b0:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d54b2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d54b4:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d54b6:	6043      	str	r3, [r0, #4]
	len = 0;
   d54b8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d54ba:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d54bc:	f7ff ffe8 	bl	d5490 <_ZN6StringaSERKS_>
}
   d54c0:	4620      	mov	r0, r4
   d54c2:	bd10      	pop	{r4, pc}

000d54c4 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d54c4:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d54c6:	b510      	push	{r4, lr}
   d54c8:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d54ca:	d001      	beq.n	d54d0 <_ZN6StringaSEOS_+0xc>
   d54cc:	f7ff ffc3 	bl	d5456 <_ZN6String4moveERS_>
	return *this;
}
   d54d0:	4620      	mov	r0, r4
   d54d2:	bd10      	pop	{r4, pc}

000d54d4 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d54d4:	b538      	push	{r3, r4, r5, lr}
   d54d6:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d54d8:	460c      	mov	r4, r1
   d54da:	b141      	cbz	r1, d54ee <_ZN6StringaSEPKc+0x1a>
   d54dc:	4608      	mov	r0, r1
   d54de:	f000 fc64 	bl	d5daa <strlen>
   d54e2:	4621      	mov	r1, r4
   d54e4:	4602      	mov	r2, r0
   d54e6:	4628      	mov	r0, r5
   d54e8:	f7ff ff8a 	bl	d5400 <_ZN6String4copyEPKcj>
   d54ec:	e001      	b.n	d54f2 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d54ee:	f7ff ff5f 	bl	d53b0 <_ZN6String10invalidateEv>

	return *this;
}
   d54f2:	4628      	mov	r0, r5
   d54f4:	bd38      	pop	{r3, r4, r5, pc}

000d54f6 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d54f6:	b510      	push	{r4, lr}
   d54f8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d54fa:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d54fc:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d54fe:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d5500:	6063      	str	r3, [r4, #4]
	len = 0;
   d5502:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5504:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5506:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d5508:	a901      	add	r1, sp, #4
   d550a:	f000 f988 	bl	d581e <itoa>
	*this = buf;
   d550e:	a901      	add	r1, sp, #4
   d5510:	4620      	mov	r0, r4
   d5512:	f7ff ffdf 	bl	d54d4 <_ZN6StringaSEPKc>
}
   d5516:	4620      	mov	r0, r4
   d5518:	b00a      	add	sp, #40	; 0x28
   d551a:	bd10      	pop	{r4, pc}

000d551c <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d551c:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d551e:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5520:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5522:	b912      	cbnz	r2, d552a <_ZNK6String6equalsEPKc+0xe>
   d5524:	b919      	cbnz	r1, d552e <_ZNK6String6equalsEPKc+0x12>
   d5526:	2001      	movs	r0, #1
   d5528:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d552a:	b911      	cbnz	r1, d5532 <_ZNK6String6equalsEPKc+0x16>
   d552c:	6803      	ldr	r3, [r0, #0]
   d552e:	7818      	ldrb	r0, [r3, #0]
   d5530:	e002      	b.n	d5538 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d5532:	6800      	ldr	r0, [r0, #0]
   d5534:	f000 fc0b 	bl	d5d4e <strcmp>
   d5538:	fab0 f080 	clz	r0, r0
   d553c:	0940      	lsrs	r0, r0, #5
}
   d553e:	bd08      	pop	{r3, pc}

000d5540 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d5540:	6800      	ldr	r0, [r0, #0]
   d5542:	b108      	cbz	r0, d5548 <_ZNK6String5toIntEv+0x8>
   d5544:	f000 bbde 	b.w	d5d04 <atol>
	return 0;
}
   d5548:	4770      	bx	lr
	...

000d554c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d554c:	4b05      	ldr	r3, [pc, #20]	; (d5564 <_GLOBAL__sub_I_System+0x18>)
   d554e:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d5552:	2000      	movs	r0, #0
   d5554:	805a      	strh	r2, [r3, #2]
   d5556:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d555a:	7018      	strb	r0, [r3, #0]
   d555c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d555e:	f7ff b89d 	b.w	d469c <set_system_mode>
   d5562:	bf00      	nop
   d5564:	2003e5c4 	.word	0x2003e5c4

000d5568 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5568:	4b02      	ldr	r3, [pc, #8]	; (d5574 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d556a:	681a      	ldr	r2, [r3, #0]
   d556c:	4b02      	ldr	r3, [pc, #8]	; (d5578 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d556e:	601a      	str	r2, [r3, #0]
   d5570:	4770      	bx	lr
   d5572:	bf00      	nop
   d5574:	2003e304 	.word	0x2003e304
   d5578:	2003e5cc 	.word	0x2003e5cc

000d557c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d557c:	4770      	bx	lr

000d557e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d557e:	7441      	strb	r1, [r0, #17]
   d5580:	4770      	bx	lr

000d5582 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d5582:	7c00      	ldrb	r0, [r0, #16]
   d5584:	f7ff b84a 	b.w	d461c <HAL_USART_Available_Data_For_Write>

000d5588 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d5588:	7c00      	ldrb	r0, [r0, #16]
   d558a:	f7ff b81f 	b.w	d45cc <HAL_USART_Available_Data>

000d558e <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d558e:	7c00      	ldrb	r0, [r0, #16]
   d5590:	f7ff b82c 	b.w	d45ec <HAL_USART_Peek_Data>

000d5594 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d5594:	7c00      	ldrb	r0, [r0, #16]
   d5596:	f7ff b821 	b.w	d45dc <HAL_USART_Read_Data>

000d559a <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d559a:	7c00      	ldrb	r0, [r0, #16]
   d559c:	f7ff b82e 	b.w	d45fc <HAL_USART_Flush_Data>

000d55a0 <_ZN11USARTSerialD0Ev>:
   d55a0:	b510      	push	{r4, lr}
   d55a2:	4604      	mov	r4, r0
   d55a4:	f7fe fd79 	bl	d409a <_ZdlPv>
   d55a8:	4620      	mov	r0, r4
   d55aa:	bd10      	pop	{r4, pc}

000d55ac <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d55ac:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d55ae:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d55b0:	4604      	mov	r4, r0
   d55b2:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d55b4:	b925      	cbnz	r5, d55c0 <_ZN11USARTSerial5writeEh+0x14>
   d55b6:	7c00      	ldrb	r0, [r0, #16]
   d55b8:	f7ff f830 	bl	d461c <HAL_USART_Available_Data_For_Write>
   d55bc:	2800      	cmp	r0, #0
   d55be:	dd05      	ble.n	d55cc <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d55c0:	4631      	mov	r1, r6
   d55c2:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d55c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d55c8:	f7fe bff8 	b.w	d45bc <HAL_USART_Write_Data>
  }
  return 0;
}
   d55cc:	4628      	mov	r0, r5
   d55ce:	bd70      	pop	{r4, r5, r6, pc}

000d55d0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d55d0:	b510      	push	{r4, lr}
   d55d2:	4604      	mov	r4, r0
   d55d4:	4608      	mov	r0, r1
   d55d6:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d55d8:	2200      	movs	r2, #0
   d55da:	6062      	str	r2, [r4, #4]
   d55dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d55e0:	60a2      	str	r2, [r4, #8]
   d55e2:	4a05      	ldr	r2, [pc, #20]	; (d55f8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d55e4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d55e6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d55e8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d55ea:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d55ec:	461a      	mov	r2, r3
   d55ee:	f7fe ffdd 	bl	d45ac <HAL_USART_Init>
}
   d55f2:	4620      	mov	r0, r4
   d55f4:	bd10      	pop	{r4, pc}
   d55f6:	bf00      	nop
   d55f8:	000d61b4 	.word	0x000d61b4

000d55fc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d55fc:	7c00      	ldrb	r0, [r0, #16]
   d55fe:	f7ff b805 	b.w	d460c <HAL_USART_Is_Enabled>
	...

000d5604 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5604:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5606:	4d0c      	ldr	r5, [pc, #48]	; (d5638 <_Z22__fetch_global_Serial1v+0x34>)
   d5608:	6829      	ldr	r1, [r5, #0]
   d560a:	f011 0401 	ands.w	r4, r1, #1
   d560e:	d111      	bne.n	d5634 <_Z22__fetch_global_Serial1v+0x30>
   d5610:	4628      	mov	r0, r5
   d5612:	f7fe fd46 	bl	d40a2 <__cxa_guard_acquire>
   d5616:	b168      	cbz	r0, d5634 <_Z22__fetch_global_Serial1v+0x30>
   d5618:	4a08      	ldr	r2, [pc, #32]	; (d563c <_Z22__fetch_global_Serial1v+0x38>)
   d561a:	4b09      	ldr	r3, [pc, #36]	; (d5640 <_Z22__fetch_global_Serial1v+0x3c>)
   d561c:	4809      	ldr	r0, [pc, #36]	; (d5644 <_Z22__fetch_global_Serial1v+0x40>)
   d561e:	4621      	mov	r1, r4
   d5620:	f7ff ffd6 	bl	d55d0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5624:	4628      	mov	r0, r5
   d5626:	f7fe fd41 	bl	d40ac <__cxa_guard_release>
   d562a:	4a07      	ldr	r2, [pc, #28]	; (d5648 <_Z22__fetch_global_Serial1v+0x44>)
   d562c:	4907      	ldr	r1, [pc, #28]	; (d564c <_Z22__fetch_global_Serial1v+0x48>)
   d562e:	4805      	ldr	r0, [pc, #20]	; (d5644 <_Z22__fetch_global_Serial1v+0x40>)
   d5630:	f000 fa18 	bl	d5a64 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5634:	4803      	ldr	r0, [pc, #12]	; (d5644 <_Z22__fetch_global_Serial1v+0x40>)
   d5636:	bd38      	pop	{r3, r4, r5, pc}
   d5638:	2003e668 	.word	0x2003e668
   d563c:	2003e66c 	.word	0x2003e66c
   d5640:	2003e5e4 	.word	0x2003e5e4
   d5644:	2003e5d0 	.word	0x2003e5d0
   d5648:	2003e370 	.word	0x2003e370
   d564c:	000d557d 	.word	0x000d557d

000d5650 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5650:	7441      	strb	r1, [r0, #17]
   d5652:	4770      	bx	lr

000d5654 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5654:	4770      	bx	lr

000d5656 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d5656:	2100      	movs	r1, #0
   d5658:	7c00      	ldrb	r0, [r0, #16]
   d565a:	f7ff b807 	b.w	d466c <HAL_USB_USART_Receive_Data>

000d565e <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d565e:	2101      	movs	r1, #1
   d5660:	7c00      	ldrb	r0, [r0, #16]
   d5662:	f7ff b803 	b.w	d466c <HAL_USB_USART_Receive_Data>

000d5666 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d5666:	7c00      	ldrb	r0, [r0, #16]
   d5668:	f7fe bff8 	b.w	d465c <HAL_USB_USART_Available_Data_For_Write>

000d566c <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d566c:	7c00      	ldrb	r0, [r0, #16]
   d566e:	f7fe bfed 	b.w	d464c <HAL_USB_USART_Available_Data>

000d5672 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d5672:	b538      	push	{r3, r4, r5, lr}
   d5674:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5676:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d5678:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d567a:	f7fe ffef 	bl	d465c <HAL_USB_USART_Available_Data_For_Write>
   d567e:	2800      	cmp	r0, #0
   d5680:	dc01      	bgt.n	d5686 <_ZN9USBSerial5writeEh+0x14>
   d5682:	7c60      	ldrb	r0, [r4, #17]
   d5684:	b120      	cbz	r0, d5690 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d5686:	4629      	mov	r1, r5
   d5688:	7c20      	ldrb	r0, [r4, #16]
   d568a:	f7fe fff7 	bl	d467c <HAL_USB_USART_Send_Data>
    return 1;
   d568e:	2001      	movs	r0, #1
  }
  return 0;
}
   d5690:	bd38      	pop	{r3, r4, r5, pc}

000d5692 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5692:	7c00      	ldrb	r0, [r0, #16]
   d5694:	f7fe bffa 	b.w	d468c <HAL_USB_USART_Flush_Data>

000d5698 <_ZN9USBSerialD0Ev>:
   d5698:	b510      	push	{r4, lr}
   d569a:	4604      	mov	r4, r0
   d569c:	f7fe fcfd 	bl	d409a <_ZdlPv>
   d56a0:	4620      	mov	r0, r4
   d56a2:	bd10      	pop	{r4, pc}

000d56a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d56a4:	b510      	push	{r4, lr}
   d56a6:	4604      	mov	r4, r0
   d56a8:	2300      	movs	r3, #0
   d56aa:	6063      	str	r3, [r4, #4]
   d56ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d56b0:	60a3      	str	r3, [r4, #8]
   d56b2:	4b05      	ldr	r3, [pc, #20]	; (d56c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d56b4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d56b6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d56b8:	4608      	mov	r0, r1
{
  _serial = serial;
   d56ba:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d56bc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d56be:	4611      	mov	r1, r2
   d56c0:	f7fe ffb4 	bl	d462c <HAL_USB_USART_Init>
}
   d56c4:	4620      	mov	r0, r4
   d56c6:	bd10      	pop	{r4, pc}
   d56c8:	000d61e4 	.word	0x000d61e4

000d56cc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d56cc:	2200      	movs	r2, #0
   d56ce:	7c00      	ldrb	r0, [r0, #16]
   d56d0:	f7fe bfb4 	b.w	d463c <HAL_USB_USART_Begin>

000d56d4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d56d4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d56d6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d56d8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d56da:	2100      	movs	r1, #0
   d56dc:	f000 fb2f 	bl	d5d3e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d56e0:	4620      	mov	r0, r4
   d56e2:	bd10      	pop	{r4, pc}

000d56e4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d56e4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d56e6:	4d0e      	ldr	r5, [pc, #56]	; (d5720 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d56e8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d56ea:	a801      	add	r0, sp, #4
   d56ec:	f7ff fff2 	bl	d56d4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d56f0:	6829      	ldr	r1, [r5, #0]
   d56f2:	f011 0401 	ands.w	r4, r1, #1
   d56f6:	d110      	bne.n	d571a <_Z16_fetch_usbserialv+0x36>
   d56f8:	4628      	mov	r0, r5
   d56fa:	f7fe fcd2 	bl	d40a2 <__cxa_guard_acquire>
   d56fe:	b160      	cbz	r0, d571a <_Z16_fetch_usbserialv+0x36>
   d5700:	aa01      	add	r2, sp, #4
   d5702:	4621      	mov	r1, r4
   d5704:	4807      	ldr	r0, [pc, #28]	; (d5724 <_Z16_fetch_usbserialv+0x40>)
   d5706:	f7ff ffcd 	bl	d56a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d570a:	4628      	mov	r0, r5
   d570c:	f7fe fcce 	bl	d40ac <__cxa_guard_release>
   d5710:	4a05      	ldr	r2, [pc, #20]	; (d5728 <_Z16_fetch_usbserialv+0x44>)
   d5712:	4906      	ldr	r1, [pc, #24]	; (d572c <_Z16_fetch_usbserialv+0x48>)
   d5714:	4803      	ldr	r0, [pc, #12]	; (d5724 <_Z16_fetch_usbserialv+0x40>)
   d5716:	f000 f9a5 	bl	d5a64 <__aeabi_atexit>
	return _usbserial;
}
   d571a:	4802      	ldr	r0, [pc, #8]	; (d5724 <_Z16_fetch_usbserialv+0x40>)
   d571c:	b007      	add	sp, #28
   d571e:	bd30      	pop	{r4, r5, pc}
   d5720:	2003e6f0 	.word	0x2003e6f0
   d5724:	2003e6f4 	.word	0x2003e6f4
   d5728:	2003e370 	.word	0x2003e370
   d572c:	000d5655 	.word	0x000d5655

000d5730 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5730:	2200      	movs	r2, #0
   d5732:	4611      	mov	r1, r2
   d5734:	6840      	ldr	r0, [r0, #4]
   d5736:	f7ff b815 	b.w	d4764 <network_ready>

000d573a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d573a:	2200      	movs	r2, #0
   d573c:	4611      	mov	r1, r2
   d573e:	6840      	ldr	r0, [r0, #4]
   d5740:	f7ff b830 	b.w	d47a4 <network_listening>

000d5744 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5744:	2200      	movs	r2, #0
   d5746:	4611      	mov	r1, r2
   d5748:	6840      	ldr	r0, [r0, #4]
   d574a:	f7ff b83b 	b.w	d47c4 <network_get_listen_timeout>

000d574e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d574e:	2200      	movs	r2, #0
   d5750:	6840      	ldr	r0, [r0, #4]
   d5752:	f7ff b82f 	b.w	d47b4 <network_set_listen_timeout>

000d5756 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5756:	2200      	movs	r2, #0
   d5758:	f081 0101 	eor.w	r1, r1, #1
   d575c:	6840      	ldr	r0, [r0, #4]
   d575e:	f7ff b819 	b.w	d4794 <network_listen>

000d5762 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5762:	2300      	movs	r3, #0
   d5764:	461a      	mov	r2, r3
   d5766:	4619      	mov	r1, r3
   d5768:	6840      	ldr	r0, [r0, #4]
   d576a:	f7ff b80b 	b.w	d4784 <network_off>

000d576e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d576e:	2300      	movs	r3, #0
   d5770:	461a      	mov	r2, r3
   d5772:	4619      	mov	r1, r3
   d5774:	6840      	ldr	r0, [r0, #4]
   d5776:	f7fe bffd 	b.w	d4774 <network_on>

000d577a <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d577a:	2200      	movs	r2, #0
   d577c:	4611      	mov	r1, r2
   d577e:	6840      	ldr	r0, [r0, #4]
   d5780:	f7fe bfe0 	b.w	d4744 <network_connecting>

000d5784 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5784:	2200      	movs	r2, #0
   d5786:	2102      	movs	r1, #2
   d5788:	6840      	ldr	r0, [r0, #4]
   d578a:	f7fe bfe3 	b.w	d4754 <network_disconnect>

000d578e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d578e:	2300      	movs	r3, #0
   d5790:	461a      	mov	r2, r3
   d5792:	6840      	ldr	r0, [r0, #4]
   d5794:	f7fe bfce 	b.w	d4734 <network_connect>

000d5798 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5798:	4b02      	ldr	r3, [pc, #8]	; (d57a4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d579a:	2204      	movs	r2, #4
   d579c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d579e:	4a02      	ldr	r2, [pc, #8]	; (d57a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d57a0:	601a      	str	r2, [r3, #0]
   d57a2:	4770      	bx	lr
   d57a4:	2003e708 	.word	0x2003e708
   d57a8:	000d6214 	.word	0x000d6214

000d57ac <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d57ac:	b510      	push	{r4, lr}
   d57ae:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d57b0:	f000 fafb 	bl	d5daa <strlen>
   d57b4:	3801      	subs	r0, #1
   d57b6:	1823      	adds	r3, r4, r0
   d57b8:	4620      	mov	r0, r4
	while(i<j){
   d57ba:	4298      	cmp	r0, r3
   d57bc:	d206      	bcs.n	d57cc <_Z11str_reversePc+0x20>
		c = *i;
   d57be:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d57c0:	7819      	ldrb	r1, [r3, #0]
   d57c2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d57c6:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d57ca:	e7f6      	b.n	d57ba <_Z11str_reversePc+0xe>
   d57cc:	bd10      	pop	{r4, pc}

000d57ce <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d57ce:	b570      	push	{r4, r5, r6, lr}
   d57d0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d57d2:	1e91      	subs	r1, r2, #2
   d57d4:	2922      	cmp	r1, #34	; 0x22
   d57d6:	d820      	bhi.n	d581a <ultoa+0x4c>
   d57d8:	4625      	mov	r5, r4
   d57da:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d57dc:	b910      	cbnz	r0, d57e4 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d57de:	4423      	add	r3, r4
            *ptr++ = '0';
   d57e0:	2230      	movs	r2, #48	; 0x30
   d57e2:	e00e      	b.n	d5802 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d57e4:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d57e8:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d57ec:	b2c1      	uxtb	r1, r0
   d57ee:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d57f2:	2809      	cmp	r0, #9
                *ptr += '0';
   d57f4:	bf94      	ite	ls
   d57f6:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d57f8:	3157      	addhi	r1, #87	; 0x57
   d57fa:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d57fe:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5800:	e7eb      	b.n	d57da <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5802:	4299      	cmp	r1, r3
   d5804:	d202      	bcs.n	d580c <ultoa+0x3e>
            *ptr++ = '0';
   d5806:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d580a:	e7fa      	b.n	d5802 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d580c:	2300      	movs	r3, #0
	str_reverse(buffer);
   d580e:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d5810:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d5812:	f7ff ffcb 	bl	d57ac <_Z11str_reversePc>
	return buffer;
   d5816:	4620      	mov	r0, r4
   d5818:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d581a:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d581c:	bd70      	pop	{r4, r5, r6, pc}

000d581e <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d581e:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d5820:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d5822:	460c      	mov	r4, r1
   d5824:	4615      	mov	r5, r2
	if(a<0){
   d5826:	da0b      	bge.n	d5840 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d5828:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d582c:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d5830:	bf14      	ite	ne
   d5832:	4258      	negne	r0, r3
   d5834:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d5836:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d5838:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d583a:	462a      	mov	r2, r5
   d583c:	4419      	add	r1, r3
   d583e:	e000      	b.n	d5842 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d5840:	2301      	movs	r3, #1
   d5842:	f7ff ffc4 	bl	d57ce <ultoa>
	}
	return buffer;
}
   d5846:	4620      	mov	r0, r4
   d5848:	bd38      	pop	{r3, r4, r5, pc}
	...

000d584c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d584c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d584e:	4b0c      	ldr	r3, [pc, #48]	; (d5880 <serialEventRun+0x34>)
   d5850:	b133      	cbz	r3, d5860 <serialEventRun+0x14>
   d5852:	f7ff ff47 	bl	d56e4 <_Z16_fetch_usbserialv>
   d5856:	6803      	ldr	r3, [r0, #0]
   d5858:	691b      	ldr	r3, [r3, #16]
   d585a:	4798      	blx	r3
   d585c:	2800      	cmp	r0, #0
   d585e:	dc09      	bgt.n	d5874 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5860:	4b08      	ldr	r3, [pc, #32]	; (d5884 <serialEventRun+0x38>)
   d5862:	b163      	cbz	r3, d587e <serialEventRun+0x32>
   d5864:	f7ff fece 	bl	d5604 <_Z22__fetch_global_Serial1v>
   d5868:	6803      	ldr	r3, [r0, #0]
   d586a:	691b      	ldr	r3, [r3, #16]
   d586c:	4798      	blx	r3
   d586e:	2800      	cmp	r0, #0
   d5870:	dc03      	bgt.n	d587a <serialEventRun+0x2e>
   d5872:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5874:	f3af 8000 	nop.w
   d5878:	e7f2      	b.n	d5860 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d587a:	f3af 8000 	nop.w
   d587e:	bd08      	pop	{r3, pc}
	...

000d5888 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5888:	b508      	push	{r3, lr}
	serialEventRun();
   d588a:	f7ff ffdf 	bl	d584c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d588e:	f7fe fdf5 	bl	d447c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5892:	4b01      	ldr	r3, [pc, #4]	; (d5898 <_post_loop+0x10>)
   d5894:	6018      	str	r0, [r3, #0]
   d5896:	bd08      	pop	{r3, pc}
   d5898:	2003e714 	.word	0x2003e714

000d589c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d589c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d589e:	2300      	movs	r3, #0
   d58a0:	9300      	str	r3, [sp, #0]
   d58a2:	461a      	mov	r2, r3
   d58a4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d58a8:	f7fe ff22 	bl	d46f0 <system_ctrl_set_result>
}
   d58ac:	b003      	add	sp, #12
   d58ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d58b4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d58b4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d58b6:	8843      	ldrh	r3, [r0, #2]
   d58b8:	2b0a      	cmp	r3, #10
   d58ba:	d008      	beq.n	d58ce <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d58bc:	2b50      	cmp	r3, #80	; 0x50
   d58be:	d109      	bne.n	d58d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d58c0:	4b09      	ldr	r3, [pc, #36]	; (d58e8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d58c2:	681b      	ldr	r3, [r3, #0]
   d58c4:	b13b      	cbz	r3, d58d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d58c6:	b003      	add	sp, #12
   d58c8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d58cc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d58ce:	f7ff ffe5 	bl	d589c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d58d2:	e006      	b.n	d58e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d58d4:	2300      	movs	r3, #0
   d58d6:	9300      	str	r3, [sp, #0]
   d58d8:	461a      	mov	r2, r3
   d58da:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d58de:	f7fe ff07 	bl	d46f0 <system_ctrl_set_result>
        break;
    }
}
   d58e2:	b003      	add	sp, #12
   d58e4:	f85d fb04 	ldr.w	pc, [sp], #4
   d58e8:	2003e710 	.word	0x2003e710

000d58ec <module_user_init_hook>:

void module_user_init_hook()
{
   d58ec:	b508      	push	{r3, lr}
        uint32_t seed = HAL_RNG_GetRandomNumber();
        random_seed_from_cloud(seed);
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d58ee:	2100      	movs	r1, #0
   d58f0:	4804      	ldr	r0, [pc, #16]	; (d5904 <module_user_init_hook+0x18>)
   d58f2:	f7fe ff17 	bl	d4724 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d58f6:	2100      	movs	r1, #0
   d58f8:	4803      	ldr	r0, [pc, #12]	; (d5908 <module_user_init_hook+0x1c>)
}
   d58fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d58fe:	f7fe beed 	b.w	d46dc <system_ctrl_set_app_request_handler>
   d5902:	bf00      	nop
   d5904:	00000000 	.word	0x00000000
   d5908:	000d58b5 	.word	0x000d58b5

000d590c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d590c:	b510      	push	{r4, lr}
   d590e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5910:	480f      	ldr	r0, [pc, #60]	; (d5950 <pinAvailable+0x44>)
   d5912:	f7ff fd43 	bl	d539c <_ZN8SPIClass9isEnabledEv>
   d5916:	b128      	cbz	r0, d5924 <pinAvailable+0x18>
   d5918:	f1a4 030b 	sub.w	r3, r4, #11
   d591c:	2b02      	cmp	r3, #2
   d591e:	d801      	bhi.n	d5924 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d5920:	2000      	movs	r0, #0
   d5922:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5924:	f000 f85c 	bl	d59e0 <_Z19__fetch_global_Wirev>
   d5928:	f7ff fac4 	bl	d4eb4 <_ZN7TwoWire9isEnabledEv>
   d592c:	b108      	cbz	r0, d5932 <pinAvailable+0x26>
   d592e:	2c01      	cmp	r4, #1
   d5930:	d9f6      	bls.n	d5920 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5932:	f7ff fe67 	bl	d5604 <_Z22__fetch_global_Serial1v>
   d5936:	f7ff fe61 	bl	d55fc <_ZN11USARTSerial9isEnabledEv>
   d593a:	b118      	cbz	r0, d5944 <pinAvailable+0x38>
   d593c:	f1a4 0309 	sub.w	r3, r4, #9
   d5940:	2b01      	cmp	r3, #1
   d5942:	d9ed      	bls.n	d5920 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5944:	2c23      	cmp	r4, #35	; 0x23
   d5946:	bf8c      	ite	hi
   d5948:	2000      	movhi	r0, #0
   d594a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d594c:	bd10      	pop	{r4, pc}
   d594e:	bf00      	nop
   d5950:	2003e730 	.word	0x2003e730

000d5954 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5954:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5956:	b538      	push	{r3, r4, r5, lr}
   d5958:	4604      	mov	r4, r0
   d595a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d595c:	d80a      	bhi.n	d5974 <pinMode+0x20>
   d595e:	29ff      	cmp	r1, #255	; 0xff
   d5960:	d008      	beq.n	d5974 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5962:	f7ff ffd3 	bl	d590c <pinAvailable>
   d5966:	b128      	cbz	r0, d5974 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5968:	4629      	mov	r1, r5
   d596a:	4620      	mov	r0, r4
}
   d596c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5970:	f7fe bd9c 	b.w	d44ac <HAL_Pin_Mode>
   d5974:	bd38      	pop	{r3, r4, r5, pc}

000d5976 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5976:	b538      	push	{r3, r4, r5, lr}
   d5978:	4604      	mov	r4, r0
   d597a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d597c:	f7fe fd9e 	bl	d44bc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5980:	28ff      	cmp	r0, #255	; 0xff
   d5982:	d010      	beq.n	d59a6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5984:	2806      	cmp	r0, #6
   d5986:	d804      	bhi.n	d5992 <digitalWrite+0x1c>
   d5988:	234d      	movs	r3, #77	; 0x4d
   d598a:	fa23 f000 	lsr.w	r0, r3, r0
   d598e:	07c3      	lsls	r3, r0, #31
   d5990:	d409      	bmi.n	d59a6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5992:	4620      	mov	r0, r4
   d5994:	f7ff ffba 	bl	d590c <pinAvailable>
   d5998:	b128      	cbz	r0, d59a6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d599a:	4629      	mov	r1, r5
   d599c:	4620      	mov	r0, r4
}
   d599e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d59a2:	f7fe bd93 	b.w	d44cc <HAL_GPIO_Write>
   d59a6:	bd38      	pop	{r3, r4, r5, pc}

000d59a8 <_Z11analogWritetmm>:
/*
 * @brief Should take an integer 0-255 and create a PWM signal with a duty cycle from 0-100%
 * and frequency from 1 to 65535 Hz.
 */
void analogWrite(pin_t pin, uint32_t value, uint32_t pwm_frequency)
{
   d59a8:	b570      	push	{r4, r5, r6, lr}
   d59aa:	4604      	mov	r4, r0
   d59ac:	460d      	mov	r5, r1
   d59ae:	4616      	mov	r6, r2
    // Safety check
    if (!pinAvailable(pin))
   d59b0:	f7ff ffac 	bl	d590c <pinAvailable>
   d59b4:	b198      	cbz	r0, d59de <_Z11analogWritetmm+0x36>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d59b6:	2102      	movs	r1, #2
   d59b8:	4620      	mov	r0, r4
   d59ba:	f7fe fd6f 	bl	d449c <HAL_Validate_Pin_Function>
   d59be:	2802      	cmp	r0, #2
   d59c0:	d10d      	bne.n	d59de <_Z11analogWritetmm+0x36>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d59c2:	4620      	mov	r0, r4
   d59c4:	f7fe fd7a 	bl	d44bc <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d59c8:	2801      	cmp	r0, #1
   d59ca:	d001      	beq.n	d59d0 <_Z11analogWritetmm+0x28>
   d59cc:	2804      	cmp	r0, #4
   d59ce:	d106      	bne.n	d59de <_Z11analogWritetmm+0x36>
        {
            return;
        }

        HAL_PWM_Write_With_Frequency_Ext(pin, value, pwm_frequency);
   d59d0:	4632      	mov	r2, r6
   d59d2:	4629      	mov	r1, r5
   d59d4:	4620      	mov	r0, r4
    }
}
   d59d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_With_Frequency_Ext(pin, value, pwm_frequency);
   d59da:	f7fe bd7f 	b.w	d44dc <HAL_PWM_Write_With_Frequency_Ext>
   d59de:	bd70      	pop	{r4, r5, r6, pc}

000d59e0 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d59e0:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d59e2:	4d0b      	ldr	r5, [pc, #44]	; (d5a10 <_Z19__fetch_global_Wirev+0x30>)
   d59e4:	6829      	ldr	r1, [r5, #0]
   d59e6:	f011 0401 	ands.w	r4, r1, #1
   d59ea:	d10f      	bne.n	d5a0c <_Z19__fetch_global_Wirev+0x2c>
   d59ec:	4628      	mov	r0, r5
   d59ee:	f7fe fb58 	bl	d40a2 <__cxa_guard_acquire>
   d59f2:	b158      	cbz	r0, d5a0c <_Z19__fetch_global_Wirev+0x2c>
   d59f4:	4621      	mov	r1, r4
   d59f6:	4807      	ldr	r0, [pc, #28]	; (d5a14 <_Z19__fetch_global_Wirev+0x34>)
   d59f8:	f7ff fa4a 	bl	d4e90 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d59fc:	4628      	mov	r0, r5
   d59fe:	f7fe fb55 	bl	d40ac <__cxa_guard_release>
   d5a02:	4a05      	ldr	r2, [pc, #20]	; (d5a18 <_Z19__fetch_global_Wirev+0x38>)
   d5a04:	4905      	ldr	r1, [pc, #20]	; (d5a1c <_Z19__fetch_global_Wirev+0x3c>)
   d5a06:	4803      	ldr	r0, [pc, #12]	; (d5a14 <_Z19__fetch_global_Wirev+0x34>)
   d5a08:	f000 f82c 	bl	d5a64 <__aeabi_atexit>
	return wire;
}
   d5a0c:	4801      	ldr	r0, [pc, #4]	; (d5a14 <_Z19__fetch_global_Wirev+0x34>)
   d5a0e:	bd38      	pop	{r3, r4, r5, pc}
   d5a10:	2003e718 	.word	0x2003e718
   d5a14:	2003e71c 	.word	0x2003e71c
   d5a18:	2003e370 	.word	0x2003e370
   d5a1c:	000d4e39 	.word	0x000d4e39

000d5a20 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5a20:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5a22:	4c0c      	ldr	r4, [pc, #48]	; (d5a54 <_GLOBAL__sub_I_SPI+0x34>)
   d5a24:	4e0c      	ldr	r6, [pc, #48]	; (d5a58 <_GLOBAL__sub_I_SPI+0x38>)
   d5a26:	4d0d      	ldr	r5, [pc, #52]	; (d5a5c <_GLOBAL__sub_I_SPI+0x3c>)
   d5a28:	2100      	movs	r1, #0
   d5a2a:	4620      	mov	r0, r4
   d5a2c:	f7ff fca2 	bl	d5374 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5a30:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5a32:	4c0b      	ldr	r4, [pc, #44]	; (d5a60 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5a34:	4632      	mov	r2, r6
   d5a36:	4629      	mov	r1, r5
   d5a38:	f000 f814 	bl	d5a64 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5a3c:	2101      	movs	r1, #1
   d5a3e:	4620      	mov	r0, r4
   d5a40:	f7ff fc98 	bl	d5374 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5a44:	4632      	mov	r2, r6
   d5a46:	4629      	mov	r1, r5
   d5a48:	4620      	mov	r0, r4
   d5a4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5a4e:	f000 b809 	b.w	d5a64 <__aeabi_atexit>
   d5a52:	bf00      	nop
   d5a54:	2003e730 	.word	0x2003e730
   d5a58:	2003e370 	.word	0x2003e370
   d5a5c:	000d5365 	.word	0x000d5365
   d5a60:	2003e740 	.word	0x2003e740

000d5a64 <__aeabi_atexit>:
   d5a64:	460b      	mov	r3, r1
   d5a66:	4601      	mov	r1, r0
   d5a68:	4618      	mov	r0, r3
   d5a6a:	f000 b94f 	b.w	d5d0c <__cxa_atexit>

000d5a6e <_ZSt25__throw_bad_function_callv>:
   d5a6e:	b508      	push	{r3, lr}
   d5a70:	f7fe fed0 	bl	d4814 <abort>

000d5a74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5a74:	4b24      	ldr	r3, [pc, #144]	; (d5b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5a76:	681a      	ldr	r2, [r3, #0]
   d5a78:	07d0      	lsls	r0, r2, #31
   d5a7a:	bf5c      	itt	pl
   d5a7c:	2201      	movpl	r2, #1
   d5a7e:	601a      	strpl	r2, [r3, #0]
   d5a80:	4b22      	ldr	r3, [pc, #136]	; (d5b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5a82:	681a      	ldr	r2, [r3, #0]
   d5a84:	07d1      	lsls	r1, r2, #31
   d5a86:	bf5c      	itt	pl
   d5a88:	2201      	movpl	r2, #1
   d5a8a:	601a      	strpl	r2, [r3, #0]
   d5a8c:	4b20      	ldr	r3, [pc, #128]	; (d5b10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5a8e:	681a      	ldr	r2, [r3, #0]
   d5a90:	07d2      	lsls	r2, r2, #31
   d5a92:	bf5c      	itt	pl
   d5a94:	2201      	movpl	r2, #1
   d5a96:	601a      	strpl	r2, [r3, #0]
   d5a98:	4b1e      	ldr	r3, [pc, #120]	; (d5b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5a9a:	681a      	ldr	r2, [r3, #0]
   d5a9c:	07d0      	lsls	r0, r2, #31
   d5a9e:	bf5c      	itt	pl
   d5aa0:	2201      	movpl	r2, #1
   d5aa2:	601a      	strpl	r2, [r3, #0]
   d5aa4:	4b1c      	ldr	r3, [pc, #112]	; (d5b18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5aa6:	681a      	ldr	r2, [r3, #0]
   d5aa8:	07d1      	lsls	r1, r2, #31
   d5aaa:	bf5c      	itt	pl
   d5aac:	2201      	movpl	r2, #1
   d5aae:	601a      	strpl	r2, [r3, #0]
   d5ab0:	4b1a      	ldr	r3, [pc, #104]	; (d5b1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5ab2:	681a      	ldr	r2, [r3, #0]
   d5ab4:	07d2      	lsls	r2, r2, #31
   d5ab6:	bf5c      	itt	pl
   d5ab8:	2201      	movpl	r2, #1
   d5aba:	601a      	strpl	r2, [r3, #0]
   d5abc:	4b18      	ldr	r3, [pc, #96]	; (d5b20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5abe:	681a      	ldr	r2, [r3, #0]
   d5ac0:	07d0      	lsls	r0, r2, #31
   d5ac2:	bf5c      	itt	pl
   d5ac4:	2201      	movpl	r2, #1
   d5ac6:	601a      	strpl	r2, [r3, #0]
   d5ac8:	4b16      	ldr	r3, [pc, #88]	; (d5b24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5aca:	681a      	ldr	r2, [r3, #0]
   d5acc:	07d1      	lsls	r1, r2, #31
   d5ace:	bf5c      	itt	pl
   d5ad0:	2201      	movpl	r2, #1
   d5ad2:	601a      	strpl	r2, [r3, #0]
   d5ad4:	4b14      	ldr	r3, [pc, #80]	; (d5b28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5ad6:	681a      	ldr	r2, [r3, #0]
   d5ad8:	07d2      	lsls	r2, r2, #31
   d5ada:	bf5c      	itt	pl
   d5adc:	2201      	movpl	r2, #1
   d5ade:	601a      	strpl	r2, [r3, #0]
   d5ae0:	4b12      	ldr	r3, [pc, #72]	; (d5b2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5ae2:	681a      	ldr	r2, [r3, #0]
   d5ae4:	07d0      	lsls	r0, r2, #31
   d5ae6:	bf5c      	itt	pl
   d5ae8:	2201      	movpl	r2, #1
   d5aea:	601a      	strpl	r2, [r3, #0]
   d5aec:	4b10      	ldr	r3, [pc, #64]	; (d5b30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5aee:	681a      	ldr	r2, [r3, #0]
   d5af0:	07d1      	lsls	r1, r2, #31
   d5af2:	bf5c      	itt	pl
   d5af4:	2201      	movpl	r2, #1
   d5af6:	601a      	strpl	r2, [r3, #0]
   d5af8:	4b0e      	ldr	r3, [pc, #56]	; (d5b34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5afa:	681a      	ldr	r2, [r3, #0]
   d5afc:	07d2      	lsls	r2, r2, #31
   d5afe:	bf5c      	itt	pl
   d5b00:	2201      	movpl	r2, #1
   d5b02:	601a      	strpl	r2, [r3, #0]
   d5b04:	4770      	bx	lr
   d5b06:	bf00      	nop
   d5b08:	2003e77c 	.word	0x2003e77c
   d5b0c:	2003e778 	.word	0x2003e778
   d5b10:	2003e774 	.word	0x2003e774
   d5b14:	2003e770 	.word	0x2003e770
   d5b18:	2003e76c 	.word	0x2003e76c
   d5b1c:	2003e768 	.word	0x2003e768
   d5b20:	2003e764 	.word	0x2003e764
   d5b24:	2003e760 	.word	0x2003e760
   d5b28:	2003e75c 	.word	0x2003e75c
   d5b2c:	2003e758 	.word	0x2003e758
   d5b30:	2003e754 	.word	0x2003e754
   d5b34:	2003e750 	.word	0x2003e750

000d5b38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5b38:	4b18      	ldr	r3, [pc, #96]	; (d5b9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5b3a:	681a      	ldr	r2, [r3, #0]
   d5b3c:	07d1      	lsls	r1, r2, #31
   d5b3e:	bf5c      	itt	pl
   d5b40:	2201      	movpl	r2, #1
   d5b42:	601a      	strpl	r2, [r3, #0]
   d5b44:	4b16      	ldr	r3, [pc, #88]	; (d5ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5b46:	681a      	ldr	r2, [r3, #0]
   d5b48:	07d2      	lsls	r2, r2, #31
   d5b4a:	bf5c      	itt	pl
   d5b4c:	2201      	movpl	r2, #1
   d5b4e:	601a      	strpl	r2, [r3, #0]
   d5b50:	4b14      	ldr	r3, [pc, #80]	; (d5ba4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5b52:	681a      	ldr	r2, [r3, #0]
   d5b54:	07d0      	lsls	r0, r2, #31
   d5b56:	bf5c      	itt	pl
   d5b58:	2201      	movpl	r2, #1
   d5b5a:	601a      	strpl	r2, [r3, #0]
   d5b5c:	4b12      	ldr	r3, [pc, #72]	; (d5ba8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5b5e:	681a      	ldr	r2, [r3, #0]
   d5b60:	07d1      	lsls	r1, r2, #31
   d5b62:	bf5c      	itt	pl
   d5b64:	2201      	movpl	r2, #1
   d5b66:	601a      	strpl	r2, [r3, #0]
   d5b68:	4b10      	ldr	r3, [pc, #64]	; (d5bac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5b6a:	681a      	ldr	r2, [r3, #0]
   d5b6c:	07d2      	lsls	r2, r2, #31
   d5b6e:	bf5c      	itt	pl
   d5b70:	2201      	movpl	r2, #1
   d5b72:	601a      	strpl	r2, [r3, #0]
   d5b74:	4b0e      	ldr	r3, [pc, #56]	; (d5bb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5b76:	681a      	ldr	r2, [r3, #0]
   d5b78:	07d0      	lsls	r0, r2, #31
   d5b7a:	bf5c      	itt	pl
   d5b7c:	2201      	movpl	r2, #1
   d5b7e:	601a      	strpl	r2, [r3, #0]
   d5b80:	4b0c      	ldr	r3, [pc, #48]	; (d5bb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5b82:	681a      	ldr	r2, [r3, #0]
   d5b84:	07d1      	lsls	r1, r2, #31
   d5b86:	bf5c      	itt	pl
   d5b88:	2201      	movpl	r2, #1
   d5b8a:	601a      	strpl	r2, [r3, #0]
   d5b8c:	4b0a      	ldr	r3, [pc, #40]	; (d5bb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5b8e:	681a      	ldr	r2, [r3, #0]
   d5b90:	07d2      	lsls	r2, r2, #31
   d5b92:	bf5c      	itt	pl
   d5b94:	2201      	movpl	r2, #1
   d5b96:	601a      	strpl	r2, [r3, #0]
   d5b98:	4770      	bx	lr
   d5b9a:	bf00      	nop
   d5b9c:	2003e79c 	.word	0x2003e79c
   d5ba0:	2003e798 	.word	0x2003e798
   d5ba4:	2003e794 	.word	0x2003e794
   d5ba8:	2003e790 	.word	0x2003e790
   d5bac:	2003e78c 	.word	0x2003e78c
   d5bb0:	2003e788 	.word	0x2003e788
   d5bb4:	2003e784 	.word	0x2003e784
   d5bb8:	2003e780 	.word	0x2003e780

000d5bbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5bbc:	4b18      	ldr	r3, [pc, #96]	; (d5c20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5bbe:	681a      	ldr	r2, [r3, #0]
   d5bc0:	07d1      	lsls	r1, r2, #31
   d5bc2:	bf5c      	itt	pl
   d5bc4:	2201      	movpl	r2, #1
   d5bc6:	601a      	strpl	r2, [r3, #0]
   d5bc8:	4b16      	ldr	r3, [pc, #88]	; (d5c24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5bca:	681a      	ldr	r2, [r3, #0]
   d5bcc:	07d2      	lsls	r2, r2, #31
   d5bce:	bf5c      	itt	pl
   d5bd0:	2201      	movpl	r2, #1
   d5bd2:	601a      	strpl	r2, [r3, #0]
   d5bd4:	4b14      	ldr	r3, [pc, #80]	; (d5c28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5bd6:	681a      	ldr	r2, [r3, #0]
   d5bd8:	07d0      	lsls	r0, r2, #31
   d5bda:	bf5c      	itt	pl
   d5bdc:	2201      	movpl	r2, #1
   d5bde:	601a      	strpl	r2, [r3, #0]
   d5be0:	4b12      	ldr	r3, [pc, #72]	; (d5c2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5be2:	681a      	ldr	r2, [r3, #0]
   d5be4:	07d1      	lsls	r1, r2, #31
   d5be6:	bf5c      	itt	pl
   d5be8:	2201      	movpl	r2, #1
   d5bea:	601a      	strpl	r2, [r3, #0]
   d5bec:	4b10      	ldr	r3, [pc, #64]	; (d5c30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5bee:	681a      	ldr	r2, [r3, #0]
   d5bf0:	07d2      	lsls	r2, r2, #31
   d5bf2:	bf5c      	itt	pl
   d5bf4:	2201      	movpl	r2, #1
   d5bf6:	601a      	strpl	r2, [r3, #0]
   d5bf8:	4b0e      	ldr	r3, [pc, #56]	; (d5c34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5bfa:	681a      	ldr	r2, [r3, #0]
   d5bfc:	07d0      	lsls	r0, r2, #31
   d5bfe:	bf5c      	itt	pl
   d5c00:	2201      	movpl	r2, #1
   d5c02:	601a      	strpl	r2, [r3, #0]
   d5c04:	4b0c      	ldr	r3, [pc, #48]	; (d5c38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5c06:	681a      	ldr	r2, [r3, #0]
   d5c08:	07d1      	lsls	r1, r2, #31
   d5c0a:	bf5c      	itt	pl
   d5c0c:	2201      	movpl	r2, #1
   d5c0e:	601a      	strpl	r2, [r3, #0]
   d5c10:	4b0a      	ldr	r3, [pc, #40]	; (d5c3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5c12:	681a      	ldr	r2, [r3, #0]
   d5c14:	07d2      	lsls	r2, r2, #31
   d5c16:	bf5c      	itt	pl
   d5c18:	2201      	movpl	r2, #1
   d5c1a:	601a      	strpl	r2, [r3, #0]
   d5c1c:	4770      	bx	lr
   d5c1e:	bf00      	nop
   d5c20:	2003e7bc 	.word	0x2003e7bc
   d5c24:	2003e7b8 	.word	0x2003e7b8
   d5c28:	2003e7b4 	.word	0x2003e7b4
   d5c2c:	2003e7b0 	.word	0x2003e7b0
   d5c30:	2003e7ac 	.word	0x2003e7ac
   d5c34:	2003e7a8 	.word	0x2003e7a8
   d5c38:	2003e7a4 	.word	0x2003e7a4
   d5c3c:	2003e7a0 	.word	0x2003e7a0

000d5c40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5c40:	4b24      	ldr	r3, [pc, #144]	; (d5cd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5c42:	681a      	ldr	r2, [r3, #0]
   d5c44:	07d0      	lsls	r0, r2, #31
   d5c46:	bf5c      	itt	pl
   d5c48:	2201      	movpl	r2, #1
   d5c4a:	601a      	strpl	r2, [r3, #0]
   d5c4c:	4b22      	ldr	r3, [pc, #136]	; (d5cd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5c4e:	681a      	ldr	r2, [r3, #0]
   d5c50:	07d1      	lsls	r1, r2, #31
   d5c52:	bf5c      	itt	pl
   d5c54:	2201      	movpl	r2, #1
   d5c56:	601a      	strpl	r2, [r3, #0]
   d5c58:	4b20      	ldr	r3, [pc, #128]	; (d5cdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5c5a:	681a      	ldr	r2, [r3, #0]
   d5c5c:	07d2      	lsls	r2, r2, #31
   d5c5e:	bf5c      	itt	pl
   d5c60:	2201      	movpl	r2, #1
   d5c62:	601a      	strpl	r2, [r3, #0]
   d5c64:	4b1e      	ldr	r3, [pc, #120]	; (d5ce0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5c66:	681a      	ldr	r2, [r3, #0]
   d5c68:	07d0      	lsls	r0, r2, #31
   d5c6a:	bf5c      	itt	pl
   d5c6c:	2201      	movpl	r2, #1
   d5c6e:	601a      	strpl	r2, [r3, #0]
   d5c70:	4b1c      	ldr	r3, [pc, #112]	; (d5ce4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5c72:	681a      	ldr	r2, [r3, #0]
   d5c74:	07d1      	lsls	r1, r2, #31
   d5c76:	bf5c      	itt	pl
   d5c78:	2201      	movpl	r2, #1
   d5c7a:	601a      	strpl	r2, [r3, #0]
   d5c7c:	4b1a      	ldr	r3, [pc, #104]	; (d5ce8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5c7e:	681a      	ldr	r2, [r3, #0]
   d5c80:	07d2      	lsls	r2, r2, #31
   d5c82:	bf5c      	itt	pl
   d5c84:	2201      	movpl	r2, #1
   d5c86:	601a      	strpl	r2, [r3, #0]
   d5c88:	4b18      	ldr	r3, [pc, #96]	; (d5cec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5c8a:	681a      	ldr	r2, [r3, #0]
   d5c8c:	07d0      	lsls	r0, r2, #31
   d5c8e:	bf5c      	itt	pl
   d5c90:	2201      	movpl	r2, #1
   d5c92:	601a      	strpl	r2, [r3, #0]
   d5c94:	4b16      	ldr	r3, [pc, #88]	; (d5cf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5c96:	681a      	ldr	r2, [r3, #0]
   d5c98:	07d1      	lsls	r1, r2, #31
   d5c9a:	bf5c      	itt	pl
   d5c9c:	2201      	movpl	r2, #1
   d5c9e:	601a      	strpl	r2, [r3, #0]
   d5ca0:	4b14      	ldr	r3, [pc, #80]	; (d5cf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5ca2:	681a      	ldr	r2, [r3, #0]
   d5ca4:	07d2      	lsls	r2, r2, #31
   d5ca6:	bf5c      	itt	pl
   d5ca8:	2201      	movpl	r2, #1
   d5caa:	601a      	strpl	r2, [r3, #0]
   d5cac:	4b12      	ldr	r3, [pc, #72]	; (d5cf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5cae:	681a      	ldr	r2, [r3, #0]
   d5cb0:	07d0      	lsls	r0, r2, #31
   d5cb2:	bf5c      	itt	pl
   d5cb4:	2201      	movpl	r2, #1
   d5cb6:	601a      	strpl	r2, [r3, #0]
   d5cb8:	4b10      	ldr	r3, [pc, #64]	; (d5cfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5cba:	681a      	ldr	r2, [r3, #0]
   d5cbc:	07d1      	lsls	r1, r2, #31
   d5cbe:	bf5c      	itt	pl
   d5cc0:	2201      	movpl	r2, #1
   d5cc2:	601a      	strpl	r2, [r3, #0]
   d5cc4:	4b0e      	ldr	r3, [pc, #56]	; (d5d00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5cc6:	681a      	ldr	r2, [r3, #0]
   d5cc8:	07d2      	lsls	r2, r2, #31
   d5cca:	bf5c      	itt	pl
   d5ccc:	2201      	movpl	r2, #1
   d5cce:	601a      	strpl	r2, [r3, #0]
   d5cd0:	4770      	bx	lr
   d5cd2:	bf00      	nop
   d5cd4:	2003e7ec 	.word	0x2003e7ec
   d5cd8:	2003e7e8 	.word	0x2003e7e8
   d5cdc:	2003e7e4 	.word	0x2003e7e4
   d5ce0:	2003e7e0 	.word	0x2003e7e0
   d5ce4:	2003e7dc 	.word	0x2003e7dc
   d5ce8:	2003e7d8 	.word	0x2003e7d8
   d5cec:	2003e7d4 	.word	0x2003e7d4
   d5cf0:	2003e7d0 	.word	0x2003e7d0
   d5cf4:	2003e7cc 	.word	0x2003e7cc
   d5cf8:	2003e7c8 	.word	0x2003e7c8
   d5cfc:	2003e7c4 	.word	0x2003e7c4
   d5d00:	2003e7c0 	.word	0x2003e7c0

000d5d04 <atol>:
   d5d04:	220a      	movs	r2, #10
   d5d06:	2100      	movs	r1, #0
   d5d08:	f000 b8de 	b.w	d5ec8 <strtol>

000d5d0c <__cxa_atexit>:
   d5d0c:	b510      	push	{r4, lr}
   d5d0e:	4c05      	ldr	r4, [pc, #20]	; (d5d24 <__cxa_atexit+0x18>)
   d5d10:	4613      	mov	r3, r2
   d5d12:	b12c      	cbz	r4, d5d20 <__cxa_atexit+0x14>
   d5d14:	460a      	mov	r2, r1
   d5d16:	4601      	mov	r1, r0
   d5d18:	2002      	movs	r0, #2
   d5d1a:	f3af 8000 	nop.w
   d5d1e:	bd10      	pop	{r4, pc}
   d5d20:	4620      	mov	r0, r4
   d5d22:	bd10      	pop	{r4, pc}
   d5d24:	00000000 	.word	0x00000000

000d5d28 <memcpy>:
   d5d28:	b510      	push	{r4, lr}
   d5d2a:	1e43      	subs	r3, r0, #1
   d5d2c:	440a      	add	r2, r1
   d5d2e:	4291      	cmp	r1, r2
   d5d30:	d004      	beq.n	d5d3c <memcpy+0x14>
   d5d32:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5d36:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5d3a:	e7f8      	b.n	d5d2e <memcpy+0x6>
   d5d3c:	bd10      	pop	{r4, pc}

000d5d3e <memset>:
   d5d3e:	4402      	add	r2, r0
   d5d40:	4603      	mov	r3, r0
   d5d42:	4293      	cmp	r3, r2
   d5d44:	d002      	beq.n	d5d4c <memset+0xe>
   d5d46:	f803 1b01 	strb.w	r1, [r3], #1
   d5d4a:	e7fa      	b.n	d5d42 <memset+0x4>
   d5d4c:	4770      	bx	lr

000d5d4e <strcmp>:
   d5d4e:	f810 2b01 	ldrb.w	r2, [r0], #1
   d5d52:	f811 3b01 	ldrb.w	r3, [r1], #1
   d5d56:	2a01      	cmp	r2, #1
   d5d58:	bf28      	it	cs
   d5d5a:	429a      	cmpcs	r2, r3
   d5d5c:	d0f7      	beq.n	d5d4e <strcmp>
   d5d5e:	1ad0      	subs	r0, r2, r3
   d5d60:	4770      	bx	lr

000d5d62 <strcpy>:
   d5d62:	4603      	mov	r3, r0
   d5d64:	f811 2b01 	ldrb.w	r2, [r1], #1
   d5d68:	f803 2b01 	strb.w	r2, [r3], #1
   d5d6c:	2a00      	cmp	r2, #0
   d5d6e:	d1f9      	bne.n	d5d64 <strcpy+0x2>
   d5d70:	4770      	bx	lr
	...

000d5d74 <strdup>:
   d5d74:	4b02      	ldr	r3, [pc, #8]	; (d5d80 <strdup+0xc>)
   d5d76:	4601      	mov	r1, r0
   d5d78:	6818      	ldr	r0, [r3, #0]
   d5d7a:	f000 b803 	b.w	d5d84 <_strdup_r>
   d5d7e:	bf00      	nop
   d5d80:	2003e36c 	.word	0x2003e36c

000d5d84 <_strdup_r>:
   d5d84:	b570      	push	{r4, r5, r6, lr}
   d5d86:	4606      	mov	r6, r0
   d5d88:	4608      	mov	r0, r1
   d5d8a:	460c      	mov	r4, r1
   d5d8c:	f000 f80d 	bl	d5daa <strlen>
   d5d90:	1c45      	adds	r5, r0, #1
   d5d92:	4629      	mov	r1, r5
   d5d94:	4630      	mov	r0, r6
   d5d96:	f7fe fd45 	bl	d4824 <_malloc_r>
   d5d9a:	4606      	mov	r6, r0
   d5d9c:	b118      	cbz	r0, d5da6 <_strdup_r+0x22>
   d5d9e:	462a      	mov	r2, r5
   d5da0:	4621      	mov	r1, r4
   d5da2:	f7ff ffc1 	bl	d5d28 <memcpy>
   d5da6:	4630      	mov	r0, r6
   d5da8:	bd70      	pop	{r4, r5, r6, pc}

000d5daa <strlen>:
   d5daa:	4603      	mov	r3, r0
   d5dac:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5db0:	2a00      	cmp	r2, #0
   d5db2:	d1fb      	bne.n	d5dac <strlen+0x2>
   d5db4:	1a18      	subs	r0, r3, r0
   d5db6:	3801      	subs	r0, #1
   d5db8:	4770      	bx	lr
	...

000d5dbc <_strtol_r>:
   d5dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5dc0:	4680      	mov	r8, r0
   d5dc2:	4840      	ldr	r0, [pc, #256]	; (d5ec4 <_strtol_r+0x108>)
   d5dc4:	f8d0 9000 	ldr.w	r9, [r0]
   d5dc8:	460f      	mov	r7, r1
   d5dca:	463d      	mov	r5, r7
   d5dcc:	f815 4b01 	ldrb.w	r4, [r5], #1
   d5dd0:	eb09 0004 	add.w	r0, r9, r4
   d5dd4:	7840      	ldrb	r0, [r0, #1]
   d5dd6:	f000 0008 	and.w	r0, r0, #8
   d5dda:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d5dde:	b108      	cbz	r0, d5de4 <_strtol_r+0x28>
   d5de0:	462f      	mov	r7, r5
   d5de2:	e7f2      	b.n	d5dca <_strtol_r+0xe>
   d5de4:	2c2d      	cmp	r4, #45	; 0x2d
   d5de6:	d103      	bne.n	d5df0 <_strtol_r+0x34>
   d5de8:	1cbd      	adds	r5, r7, #2
   d5dea:	787c      	ldrb	r4, [r7, #1]
   d5dec:	2601      	movs	r6, #1
   d5dee:	e003      	b.n	d5df8 <_strtol_r+0x3c>
   d5df0:	2c2b      	cmp	r4, #43	; 0x2b
   d5df2:	bf04      	itt	eq
   d5df4:	787c      	ldrbeq	r4, [r7, #1]
   d5df6:	1cbd      	addeq	r5, r7, #2
   d5df8:	b113      	cbz	r3, d5e00 <_strtol_r+0x44>
   d5dfa:	2b10      	cmp	r3, #16
   d5dfc:	d10a      	bne.n	d5e14 <_strtol_r+0x58>
   d5dfe:	e05b      	b.n	d5eb8 <_strtol_r+0xfc>
   d5e00:	2c30      	cmp	r4, #48	; 0x30
   d5e02:	d157      	bne.n	d5eb4 <_strtol_r+0xf8>
   d5e04:	7828      	ldrb	r0, [r5, #0]
   d5e06:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d5e0a:	2858      	cmp	r0, #88	; 0x58
   d5e0c:	d14d      	bne.n	d5eaa <_strtol_r+0xee>
   d5e0e:	786c      	ldrb	r4, [r5, #1]
   d5e10:	2310      	movs	r3, #16
   d5e12:	3502      	adds	r5, #2
   d5e14:	2e00      	cmp	r6, #0
   d5e16:	bf14      	ite	ne
   d5e18:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d5e1c:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d5e20:	2700      	movs	r7, #0
   d5e22:	fbbc faf3 	udiv	sl, ip, r3
   d5e26:	4638      	mov	r0, r7
   d5e28:	fb03 cc1a 	mls	ip, r3, sl, ip
   d5e2c:	eb09 0e04 	add.w	lr, r9, r4
   d5e30:	f89e e001 	ldrb.w	lr, [lr, #1]
   d5e34:	f01e 0f04 	tst.w	lr, #4
   d5e38:	d001      	beq.n	d5e3e <_strtol_r+0x82>
   d5e3a:	3c30      	subs	r4, #48	; 0x30
   d5e3c:	e00b      	b.n	d5e56 <_strtol_r+0x9a>
   d5e3e:	f01e 0e03 	ands.w	lr, lr, #3
   d5e42:	d01b      	beq.n	d5e7c <_strtol_r+0xc0>
   d5e44:	f1be 0f01 	cmp.w	lr, #1
   d5e48:	bf0c      	ite	eq
   d5e4a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d5e4e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d5e52:	ebce 0404 	rsb	r4, lr, r4
   d5e56:	42a3      	cmp	r3, r4
   d5e58:	dd10      	ble.n	d5e7c <_strtol_r+0xc0>
   d5e5a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d5e5e:	d00a      	beq.n	d5e76 <_strtol_r+0xba>
   d5e60:	4550      	cmp	r0, sl
   d5e62:	d806      	bhi.n	d5e72 <_strtol_r+0xb6>
   d5e64:	d101      	bne.n	d5e6a <_strtol_r+0xae>
   d5e66:	4564      	cmp	r4, ip
   d5e68:	dc03      	bgt.n	d5e72 <_strtol_r+0xb6>
   d5e6a:	fb03 4000 	mla	r0, r3, r0, r4
   d5e6e:	2701      	movs	r7, #1
   d5e70:	e001      	b.n	d5e76 <_strtol_r+0xba>
   d5e72:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d5e76:	f815 4b01 	ldrb.w	r4, [r5], #1
   d5e7a:	e7d7      	b.n	d5e2c <_strtol_r+0x70>
   d5e7c:	1c7b      	adds	r3, r7, #1
   d5e7e:	d10c      	bne.n	d5e9a <_strtol_r+0xde>
   d5e80:	2e00      	cmp	r6, #0
   d5e82:	f04f 0322 	mov.w	r3, #34	; 0x22
   d5e86:	bf14      	ite	ne
   d5e88:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d5e8c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d5e90:	f8c8 3000 	str.w	r3, [r8]
   d5e94:	b92a      	cbnz	r2, d5ea2 <_strtol_r+0xe6>
   d5e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5e9a:	b106      	cbz	r6, d5e9e <_strtol_r+0xe2>
   d5e9c:	4240      	negs	r0, r0
   d5e9e:	b172      	cbz	r2, d5ebe <_strtol_r+0x102>
   d5ea0:	b107      	cbz	r7, d5ea4 <_strtol_r+0xe8>
   d5ea2:	1e69      	subs	r1, r5, #1
   d5ea4:	6011      	str	r1, [r2, #0]
   d5ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5eaa:	2430      	movs	r4, #48	; 0x30
   d5eac:	2b00      	cmp	r3, #0
   d5eae:	d1b1      	bne.n	d5e14 <_strtol_r+0x58>
   d5eb0:	2308      	movs	r3, #8
   d5eb2:	e7af      	b.n	d5e14 <_strtol_r+0x58>
   d5eb4:	230a      	movs	r3, #10
   d5eb6:	e7ad      	b.n	d5e14 <_strtol_r+0x58>
   d5eb8:	2c30      	cmp	r4, #48	; 0x30
   d5eba:	d0a3      	beq.n	d5e04 <_strtol_r+0x48>
   d5ebc:	e7aa      	b.n	d5e14 <_strtol_r+0x58>
   d5ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5ec2:	bf00      	nop
   d5ec4:	2003e308 	.word	0x2003e308

000d5ec8 <strtol>:
   d5ec8:	4613      	mov	r3, r2
   d5eca:	460a      	mov	r2, r1
   d5ecc:	4601      	mov	r1, r0
   d5ece:	4802      	ldr	r0, [pc, #8]	; (d5ed8 <strtol+0x10>)
   d5ed0:	6800      	ldr	r0, [r0, #0]
   d5ed2:	f7ff bf73 	b.w	d5dbc <_strtol_r>
   d5ed6:	bf00      	nop
   d5ed8:	2003e36c 	.word	0x2003e36c

000d5edc <dynalib_user>:
   d5edc:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d5eec:	00000000 30314d50 314b2820 203a2936     ....PM10 (K16): 
   d5efc:	314d5000 46282030 3a293334 72740020     .PM10 (F43): .tr
   d5f0c:	66006575 65736c61 69654600 6174736e     ue.false.Feinsta
   d5f1c:	6c616275 3a6d7261 0a732520 69654600     ubalarm: %s..Fei
   d5f2c:	6174736e 6c616275 3a6d7261 72724520     nstaubalarm: Err
   d5f3c:	0021726f 6b6f6f68 7365722d 736e6f70     or!.hook-respons
   d5f4c:	4d502f65 4b5f3031 68003631 2d6b6f6f     e/PM10_K16.hook-
   d5f5c:	70736572 65736e6f 314d502f 34465f30     response/PM10_F4
   d5f6c:	6f680033 722d6b6f 6f707365 2f65736e     3.hook-response/
   d5f7c:	6e696546 75617473 616c6162 535f6d72     Feinstaubalarm_S
   d5f8c:	74747574 74726167 00000000              tuttgart....

000d5f98 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d5fa0:	000d4879 000d487f 000d48a7 000d488b     yH...H...H...H..
   d5fb0:	000d487b                                {H..

000d5fb4 <_ZTVN5spark13EthernetClassE>:
	...
   d5fbc:	000d4e1b 000d4e11 000d4e07 000d4dfd     .N...N...N...M..
   d5fcc:	000d4df1 000d4de5 000d4dd9 000d4dd1     .M...M...M...M..
   d5fdc:	000d4dc7 000d4dbd 000d514d              .M...M..MQ..

000d5fe8 <_ZTV7TwoWire>:
	...
   d5ff0:	000d4e39 000d4e83 000d4e5b 000d4e3b     9N...N..[N..;N..
   d6000:	000d4e63 000d4e6b 000d4e73 000d4e7b     cN..kN..sN..{N..

000d6010 <_ZTV9IPAddress>:
	...
   d6018:	000d4ecb 000d4ebd 000d4ebf 6e6c0066     .N...N...N..f.ln
   d6028:	006e6600 65646f63 74656400 006c6961     .fn.code.detail.
   d6038:	25000a0d 75303130 205d0020 00642500     ...%010u .] .%d.
   d6048:	2800202c 00203a29 63005b20 2065646f     , .(): . [.code 
   d6058:	2500203d 65640069 6c696174 203d2073     = .%i.details = 
   d6068:	75616200 65530064 6c616972 72655300     .baud.Serial.Ser
   d6078:	316c6169 70797400 61700065 006d6172     ial1.type.param.
   d6088:	00646d63 68006469 7300646e 006d7274     cmd.id.hnd.strm.
   d6098:	746c6966 6c766c00 64646100 646e6148     filt.lvl.addHand
   d60a8:	0072656c 6f6d6572 61486576 656c646e     ler.removeHandle
   d60b8:	6e650072 61486d75 656c646e 4a007372     r.enumHandlers.J
   d60c8:	534e4f53 61657274 676f4c6d 646e6148     SONStreamLogHand
   d60d8:	0072656c 00707061 656e6f6e 61727400     ler.app.none.tra
   d60e8:	69006563 006f666e 6e726177 72726500     ce.info.warn.err
   d60f8:	7000726f 63696e61 6c6c6100 00000000     or.panic.all....

000d6108 <_ZTVN5spark9MeshClassE>:
	...
   d6110:	000d500f 000d5005 000d4ffb 000d4ff1     .P...P...O...O..
   d6120:	000d4fe5 000d4fd9 000d4fcd 000d4fc5     .O...O...O...O..
   d6130:	000d4fbb 000d4fb1 000d514d              .O...O..MQ..

000d613c <_ZTVN5spark12NetworkClassE>:
	...
   d6144:	000d50e5 000d50ef 000d50f9 000d5103     .P...P...P...Q..
   d6154:	000d510d 000d5119 000d5125 000d5131     .Q...Q..%Q..1Q..
   d6164:	000d5139 000d5143 000d514d              9Q..CQ..MQ..

000d6170 <_ZTV8SPIClass>:
	...
   d6178:	000d5365 000d5367 2b25005a 3a643330     eS..gS..Z.%+03d:
   d6188:	75323025 2d592500 252d6d25 48255464     %02u.%Y-%m-%dT%H
   d6198:	3a4d253a 7a255325 63736100 656d6974     :%M:%S%z.asctime
   d61a8:	00000000                                ....

000d61ac <_ZTV11USARTSerial>:
	...
   d61b4:	000d557d 000d55a1 000d55ad 000d51e5     }U...U...U...Q..
   d61c4:	000d5589 000d5595 000d558f 000d559b     .U...U...U...U..
   d61d4:	000d557f 000d5583                       .U...U..

000d61dc <_ZTV9USBSerial>:
	...
   d61e4:	000d5655 000d5699 000d5673 000d51e5     UV...V..sV...Q..
   d61f4:	000d566d 000d5657 000d565f 000d5693     mV..WV.._V...V..
   d6204:	000d5667 000d5651                       gV..QV..

000d620c <_ZTVN5spark9WiFiClassE>:
	...
   d6214:	000d578f 000d5785 000d577b 000d5731     .W...W..{W..1W..
   d6224:	000d576f 000d5763 000d5757 000d574f     oW..cW..WW..OW..
   d6234:	000d5745 000d573b 000d514d              EW..;W..MQ..

000d6240 <_ctype_>:
   d6240:	20202000 20202020 28282020 20282828     .         ((((( 
   d6250:	20202020 20202020 20202020 20202020                     
   d6260:	10108820 10101010 10101010 10101010      ...............
   d6270:	04040410 04040404 10040404 10101010     ................
   d6280:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d6290:	01010101 01010101 01010101 10101010     ................
   d62a0:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d62b0:	02020202 02020202 02020202 10101010     ................
   d62c0:	00000020 00000000 00000000 00000000      ...............
	...

000d6344 <__sf_fake_stdin>:
	...

000d6364 <__sf_fake_stdout>:
	...

000d6384 <__sf_fake_stderr>:
	...
   d63a4:	00000043                                         C.

000d63a6 <link_const_variable_data_end>:
	...

000d63a8 <link_constructors_location>:
   d63a8:	000d4389 	.word	0x000d4389
   d63ac:	000d4e25 	.word	0x000d4e25
   d63b0:	000d4fa1 	.word	0x000d4fa1
   d63b4:	000d5099 	.word	0x000d5099
   d63b8:	000d51d1 	.word	0x000d51d1
   d63bc:	000d5349 	.word	0x000d5349
   d63c0:	000d554d 	.word	0x000d554d
   d63c4:	000d5569 	.word	0x000d5569
   d63c8:	000d5799 	.word	0x000d5799
   d63cc:	000d5a21 	.word	0x000d5a21
   d63d0:	000d5a75 	.word	0x000d5a75
   d63d4:	000d5b39 	.word	0x000d5b39
   d63d8:	000d5bbd 	.word	0x000d5bbd
   d63dc:	000d5c41 	.word	0x000d5c41
